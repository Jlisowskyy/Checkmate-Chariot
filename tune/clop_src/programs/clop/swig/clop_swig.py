# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _clop_swig
else:
    import _clop_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def hardware_concurrency():
    return _clop_swig.hardware_concurrency()
class Random(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n=0):
        _clop_swig.Random_swiginit(self, _clop_swig.new_Random(n))

    def Seed(self, ulSeed):
        return _clop_swig.Random_Seed(self, ulSeed)

    def NewValue(self):
        return _clop_swig.Random_NewValue(self)

    def NextDouble(self):
        return _clop_swig.Random_NextDouble(self)

    def NextGaussian(self):
        return _clop_swig.Random_NextGaussian(self)

    def NextExponential(self):
        return _clop_swig.Random_NextExponential(self)

    def BinaryWrite(self, out):
        return _clop_swig.Random_BinaryWrite(self, out)

    def BinaryRead(self, _in):
        return _clop_swig.Random_BinaryRead(self, _in)
    __swig_destroy__ = _clop_swig.delete_Random

# Register Random in _clop_swig:
_clop_swig.Random_swigregister(Random)
class doubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _clop_swig.doubleArray_swiginit(self, _clop_swig.new_doubleArray(nelements))
    __swig_destroy__ = _clop_swig.delete_doubleArray

    def __getitem__(self, index):
        return _clop_swig.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _clop_swig.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _clop_swig.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _clop_swig.doubleArray_frompointer(t)

# Register doubleArray in _clop_swig:
_clop_swig.doubleArray_swigregister(doubleArray)
class intArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _clop_swig.intArray_swiginit(self, _clop_swig.new_intArray(nelements))
    __swig_destroy__ = _clop_swig.delete_intArray

    def __getitem__(self, index):
        return _clop_swig.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _clop_swig.intArray___setitem__(self, index, value)

    def cast(self):
        return _clop_swig.intArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _clop_swig.intArray_frompointer(t)

# Register intArray in _clop_swig:
_clop_swig.intArray_swigregister(intArray)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _clop_swig.delete_SwigPyIterator

    def value(self):
        return _clop_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _clop_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _clop_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _clop_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _clop_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _clop_swig.SwigPyIterator_copy(self)

    def next(self):
        return _clop_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _clop_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _clop_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _clop_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _clop_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _clop_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _clop_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _clop_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _clop_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _clop_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _clop_swig:
_clop_swig.SwigPyIterator_swigregister(SwigPyIterator)
class vectord(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _clop_swig.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _clop_swig.vectord___nonzero__(self)

    def __bool__(self):
        return _clop_swig.vectord___bool__(self)

    def __len__(self):
        return _clop_swig.vectord___len__(self)

    def __getslice__(self, i, j):
        return _clop_swig.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _clop_swig.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _clop_swig.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _clop_swig.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _clop_swig.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _clop_swig.vectord___setitem__(self, *args)

    def pop(self):
        return _clop_swig.vectord_pop(self)

    def append(self, x):
        return _clop_swig.vectord_append(self, x)

    def empty(self):
        return _clop_swig.vectord_empty(self)

    def size(self):
        return _clop_swig.vectord_size(self)

    def swap(self, v):
        return _clop_swig.vectord_swap(self, v)

    def begin(self):
        return _clop_swig.vectord_begin(self)

    def end(self):
        return _clop_swig.vectord_end(self)

    def rbegin(self):
        return _clop_swig.vectord_rbegin(self)

    def rend(self):
        return _clop_swig.vectord_rend(self)

    def clear(self):
        return _clop_swig.vectord_clear(self)

    def get_allocator(self):
        return _clop_swig.vectord_get_allocator(self)

    def pop_back(self):
        return _clop_swig.vectord_pop_back(self)

    def erase(self, *args):
        return _clop_swig.vectord_erase(self, *args)

    def __init__(self, *args):
        _clop_swig.vectord_swiginit(self, _clop_swig.new_vectord(*args))

    def push_back(self, x):
        return _clop_swig.vectord_push_back(self, x)

    def front(self):
        return _clop_swig.vectord_front(self)

    def back(self):
        return _clop_swig.vectord_back(self)

    def assign(self, n, x):
        return _clop_swig.vectord_assign(self, n, x)

    def resize(self, *args):
        return _clop_swig.vectord_resize(self, *args)

    def insert(self, *args):
        return _clop_swig.vectord_insert(self, *args)

    def reserve(self, n):
        return _clop_swig.vectord_reserve(self, n)

    def capacity(self):
        return _clop_swig.vectord_capacity(self)
    __swig_destroy__ = _clop_swig.delete_vectord

# Register vectord in _clop_swig:
_clop_swig.vectord_swigregister(vectord)
class slist(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _clop_swig.slist_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _clop_swig.slist___nonzero__(self)

    def __bool__(self):
        return _clop_swig.slist___bool__(self)

    def __len__(self):
        return _clop_swig.slist___len__(self)

    def __getslice__(self, i, j):
        return _clop_swig.slist___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _clop_swig.slist___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _clop_swig.slist___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _clop_swig.slist___delitem__(self, *args)

    def __getitem__(self, *args):
        return _clop_swig.slist___getitem__(self, *args)

    def __setitem__(self, *args):
        return _clop_swig.slist___setitem__(self, *args)

    def pop(self):
        return _clop_swig.slist_pop(self)

    def append(self, x):
        return _clop_swig.slist_append(self, x)

    def empty(self):
        return _clop_swig.slist_empty(self)

    def size(self):
        return _clop_swig.slist_size(self)

    def swap(self, v):
        return _clop_swig.slist_swap(self, v)

    def begin(self):
        return _clop_swig.slist_begin(self)

    def end(self):
        return _clop_swig.slist_end(self)

    def rbegin(self):
        return _clop_swig.slist_rbegin(self)

    def rend(self):
        return _clop_swig.slist_rend(self)

    def clear(self):
        return _clop_swig.slist_clear(self)

    def get_allocator(self):
        return _clop_swig.slist_get_allocator(self)

    def pop_back(self):
        return _clop_swig.slist_pop_back(self)

    def erase(self, *args):
        return _clop_swig.slist_erase(self, *args)

    def __init__(self, *args):
        _clop_swig.slist_swiginit(self, _clop_swig.new_slist(*args))

    def push_back(self, x):
        return _clop_swig.slist_push_back(self, x)

    def front(self):
        return _clop_swig.slist_front(self)

    def back(self):
        return _clop_swig.slist_back(self)

    def assign(self, n, x):
        return _clop_swig.slist_assign(self, n, x)

    def resize(self, *args):
        return _clop_swig.slist_resize(self, *args)

    def insert(self, *args):
        return _clop_swig.slist_insert(self, *args)

    def pop_front(self):
        return _clop_swig.slist_pop_front(self)

    def push_front(self, x):
        return _clop_swig.slist_push_front(self, x)

    def reverse(self):
        return _clop_swig.slist_reverse(self)
    __swig_destroy__ = _clop_swig.delete_slist

# Register slist in _clop_swig:
_clop_swig.slist_swigregister(slist)
class CResults(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions):
        _clop_swig.CResults_swiginit(self, _clop_swig.new_CResults(Dimensions))

    def AddSample(self, *args):
        return _clop_swig.CResults_AddSample(self, *args)

    def AddOutcome(self, i, outcome):
        return _clop_swig.CResults_AddOutcome(self, i, outcome)

    def Reset(self):
        return _clop_swig.CResults_Reset(self)

    def Refresh(self):
        return _clop_swig.CResults_Refresh(self)

    def Reserve(self, n):
        return _clop_swig.CResults_Reserve(self, n)

    def GetDimensions(self):
        return _clop_swig.CResults_GetDimensions(self)

    def GetSamples(self):
        return _clop_swig.CResults_GetSamples(self)

    def GetSample(self, i):
        return _clop_swig.CResults_GetSample(self, i)

    def GetOutcome(self, i):
        return _clop_swig.CResults_GetOutcome(self, i)

    def CountOutcomes(self, outcome, MinIndex=0):
        return _clop_swig.CResults_CountOutcomes(self, outcome, MinIndex)
    __swig_destroy__ = _clop_swig.delete_CResults

# Register CResults in _clop_swig:
_clop_swig.CResults_swigregister(CResults)
class COutcome(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Loss = _clop_swig.COutcome_Loss
    Win = _clop_swig.COutcome_Win
    Draw = _clop_swig.COutcome_Draw
    Outcomes = _clop_swig.COutcome_Outcomes
    Unknown = _clop_swig.COutcome_Unknown
    InProgress = _clop_swig.COutcome_InProgress
    AllOutcomes = _clop_swig.COutcome_AllOutcomes

    def __init__(self, *args):
        _clop_swig.COutcome_swiginit(self, _clop_swig.new_COutcome(*args))

    def __eq__(self, vx):
        return _clop_swig.COutcome___eq__(self, vx)

    def __ne__(self, vx):
        return _clop_swig.COutcome___ne__(self, vx)
    __swig_destroy__ = _clop_swig.delete_COutcome

# Register COutcome in _clop_swig:
_clop_swig.COutcome_swigregister(COutcome)
class CArtificialProblem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetOutcome(self, v):
        return _clop_swig.CArtificialProblem_GetOutcome(self, v)

    def Seed(self, n):
        return _clop_swig.CArtificialProblem_Seed(self, n)

    def GetDimensions(self):
        return _clop_swig.CArtificialProblem_GetDimensions(self)

    def GetStrength(self, v):
        return _clop_swig.CArtificialProblem_GetStrength(self, v)

    def GetProba(self, v):
        return _clop_swig.CArtificialProblem_GetProba(self, v)

    def GetOptimalProba(self):
        return _clop_swig.CArtificialProblem_GetOptimalProba(self)

    def GetOptimalParameters(self, v):
        return _clop_swig.CArtificialProblem_GetOptimalParameters(self, v)
    __swig_destroy__ = _clop_swig.delete_CArtificialProblem

# Register CArtificialProblem in _clop_swig:
_clop_swig.CArtificialProblem_swigregister(CArtificialProblem)
class CPQuadratic1D(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x0, Strength, Steepness):
        _clop_swig.CPQuadratic1D_swiginit(self, _clop_swig.new_CPQuadratic1D(x0, Strength, Steepness))

    def GetAlpha(self):
        return _clop_swig.CPQuadratic1D_GetAlpha(self)

    def GetBeta(self):
        return _clop_swig.CPQuadratic1D_GetBeta(self)

    def GetMu(self):
        return _clop_swig.CPQuadratic1D_GetMu(self)

    def GetStrength(self, v):
        return _clop_swig.CPQuadratic1D_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPQuadratic1D_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPQuadratic1D_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPQuadratic1D

# Register CPQuadratic1D in _clop_swig:
_clop_swig.CPQuadratic1D_swigregister(CPQuadratic1D)
class CPQuadratic2D(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetStrength(self, v):
        return _clop_swig.CPQuadratic2D_GetStrength(self, v)

    def GetDimensions(self):
        return _clop_swig.CPQuadratic2D_GetDimensions(self)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPQuadratic2D_GetOptimalParameters(self, v)

    def __init__(self):
        _clop_swig.CPQuadratic2D_swiginit(self, _clop_swig.new_CPQuadratic2D())
    __swig_destroy__ = _clop_swig.delete_CPQuadratic2D

# Register CPQuadratic2D in _clop_swig:
_clop_swig.CPQuadratic2D_swigregister(CPQuadratic2D)
class CPQuadraticND(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetStrength(self, v):
        return _clop_swig.CPQuadraticND_GetStrength(self, v)

    def GetDimensions(self):
        return _clop_swig.CPQuadraticND_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPQuadraticND

# Register CPQuadraticND in _clop_swig:
_clop_swig.CPQuadraticND_swigregister(CPQuadraticND)
class CPLog1D(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetStrength(self, v):
        return _clop_swig.CPLog1D_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPLog1D_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPLog1D_GetDimensions(self)

    def __init__(self):
        _clop_swig.CPLog1D_swiginit(self, _clop_swig.new_CPLog1D())
    __swig_destroy__ = _clop_swig.delete_CPLog1D

# Register CPLog1D in _clop_swig:
_clop_swig.CPLog1D_swigregister(CPLog1D)
class CPDiscontinuous(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetStrength(self, v):
        return _clop_swig.CPDiscontinuous_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPDiscontinuous_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPDiscontinuous_GetDimensions(self)

    def __init__(self):
        _clop_swig.CPDiscontinuous_swiginit(self, _clop_swig.new_CPDiscontinuous())
    __swig_destroy__ = _clop_swig.delete_CPDiscontinuous

# Register CPDiscontinuous in _clop_swig:
_clop_swig.CPDiscontinuous_swigregister(CPDiscontinuous)
class CPPositive(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _clop_swig.CPPositive_swiginit(self, _clop_swig.new_CPPositive())

    def GetStrength(self, v):
        return _clop_swig.CPPositive_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPPositive_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPPositive_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPPositive

# Register CPPositive in _clop_swig:
_clop_swig.CPPositive_swigregister(CPPositive)
class CPComplicated1D(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetStrength(self, v):
        return _clop_swig.CPComplicated1D_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPComplicated1D_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPComplicated1D_GetDimensions(self)

    def __init__(self):
        _clop_swig.CPComplicated1D_swiginit(self, _clop_swig.new_CPComplicated1D())
    __swig_destroy__ = _clop_swig.delete_CPComplicated1D

# Register CPComplicated1D in _clop_swig:
_clop_swig.CPComplicated1D_swigregister(CPComplicated1D)
class CPNonQuadratic2D(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetStrength(self, v):
        return _clop_swig.CPNonQuadratic2D_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPNonQuadratic2D_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPNonQuadratic2D_GetDimensions(self)

    def __init__(self):
        _clop_swig.CPNonQuadratic2D_swiginit(self, _clop_swig.new_CPNonQuadratic2D())
    __swig_destroy__ = _clop_swig.delete_CPNonQuadratic2D

# Register CPNonQuadratic2D in _clop_swig:
_clop_swig.CPNonQuadratic2D_swigregister(CPNonQuadratic2D)
class CPNonQuadraticND(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions=1):
        _clop_swig.CPNonQuadraticND_swiginit(self, _clop_swig.new_CPNonQuadraticND(Dimensions))

    def GetStrength(self, v):
        return _clop_swig.CPNonQuadraticND_GetStrength(self, v)

    def GetOptimalProba(self):
        return _clop_swig.CPNonQuadraticND_GetOptimalProba(self)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPNonQuadraticND_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPNonQuadraticND_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPNonQuadraticND

# Register CPNonQuadraticND in _clop_swig:
_clop_swig.CPNonQuadraticND_swigregister(CPNonQuadraticND)
class CPZeroND(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetStrength(self, v):
        return _clop_swig.CPZeroND_GetStrength(self, v)

    def GetProba(self, v):
        return _clop_swig.CPZeroND_GetProba(self, v)

    def GetDimensions(self):
        return _clop_swig.CPZeroND_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPZeroND

# Register CPZeroND in _clop_swig:
_clop_swig.CPZeroND_swigregister(CPZeroND)
class CPAbsND(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions, Scale):
        _clop_swig.CPAbsND_swiginit(self, _clop_swig.new_CPAbsND(Dimensions, Scale))

    def GetStrength(self, v):
        return _clop_swig.CPAbsND_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPAbsND_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPAbsND_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPAbsND

# Register CPAbsND in _clop_swig:
_clop_swig.CPAbsND_swigregister(CPAbsND)
class CPFish1D(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a=0.1):
        _clop_swig.CPFish1D_swiginit(self, _clop_swig.new_CPFish1D(a))

    def GetProba(self, v):
        return _clop_swig.CPFish1D_GetProba(self, v)

    def GetStrength(self, v):
        return _clop_swig.CPFish1D_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPFish1D_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPFish1D_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPFish1D

# Register CPFish1D in _clop_swig:
_clop_swig.CPFish1D_swigregister(CPFish1D)
class CPDonut(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions):
        _clop_swig.CPDonut_swiginit(self, _clop_swig.new_CPDonut(Dimensions))

    def GetStrength(self, v):
        return _clop_swig.CPDonut_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPDonut_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPDonut_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPDonut

# Register CPDonut in _clop_swig:
_clop_swig.CPDonut_swigregister(CPDonut)
class CPParametric(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pf, vParam):
        _clop_swig.CPParametric_swiginit(self, _clop_swig.new_CPParametric(pf, vParam))

                #check-pythonappend CPParametric::CPParametric
        self.pf_reference = args[0]




    def GetStrength(self, v):
        return _clop_swig.CPParametric_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPParametric_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPParametric_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPParametric

# Register CPParametric in _clop_swig:
_clop_swig.CPParametric_swigregister(CPParametric)
class CPRosenbrock(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetStrength(self, v):
        return _clop_swig.CPRosenbrock_GetStrength(self, v)

    def GetDimensions(self):
        return _clop_swig.CPRosenbrock_GetDimensions(self)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPRosenbrock_GetOptimalParameters(self, v)

    def __init__(self):
        _clop_swig.CPRosenbrock_swiginit(self, _clop_swig.new_CPRosenbrock())
    __swig_destroy__ = _clop_swig.delete_CPRosenbrock

# Register CPRosenbrock in _clop_swig:
_clop_swig.CPRosenbrock_swigregister(CPRosenbrock)
class CPVolcano(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dimensions=2, alpha=0.3):
        _clop_swig.CPVolcano_swiginit(self, _clop_swig.new_CPVolcano(dimensions, alpha))

    def GetStrength(self, v):
        return _clop_swig.CPVolcano_GetStrength(self, v)

    def GetDimensions(self):
        return _clop_swig.CPVolcano_GetDimensions(self)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPVolcano_GetOptimalParameters(self, v)
    __swig_destroy__ = _clop_swig.delete_CPVolcano

# Register CPVolcano in _clop_swig:
_clop_swig.CPVolcano_swigregister(CPVolcano)
class COlivier(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetDimensions(self):
        return _clop_swig.COlivier_GetDimensions(self)

    def GetStrength(self, v):
        return _clop_swig.COlivier_GetStrength(self, v)

    def GetProba(self, v):
        return _clop_swig.COlivier_GetProba(self, v)
    __swig_destroy__ = _clop_swig.delete_COlivier

# Register COlivier in _clop_swig:
_clop_swig.COlivier_swigregister(COlivier)
class CPSinExp(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Freq=2.0, Offset=0.7, Decay=-3.0):
        _clop_swig.CPSinExp_swiginit(self, _clop_swig.new_CPSinExp(Freq, Offset, Decay))

    def GetStrength(self, v):
        return _clop_swig.CPSinExp_GetStrength(self, v)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPSinExp_GetOptimalParameters(self, v)

    def GetDimensions(self):
        return _clop_swig.CPSinExp_GetDimensions(self)
    __swig_destroy__ = _clop_swig.delete_CPSinExp

# Register CPSinExp in _clop_swig:
_clop_swig.CPSinExp_swigregister(CPSinExp)
class CPFlat(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions=1):
        _clop_swig.CPFlat_swiginit(self, _clop_swig.new_CPFlat(Dimensions))

    def GetStrength(self, v):
        return _clop_swig.CPFlat_GetStrength(self, v)

    def GetDimensions(self):
        return _clop_swig.CPFlat_GetDimensions(self)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPFlat_GetOptimalParameters(self, v)
    __swig_destroy__ = _clop_swig.delete_CPFlat

# Register CPFlat in _clop_swig:
_clop_swig.CPFlat_swigregister(CPFlat)
class CPIllIndependent(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetStrength(self, v):
        return _clop_swig.CPIllIndependent_GetStrength(self, v)

    def GetDimensions(self):
        return _clop_swig.CPIllIndependent_GetDimensions(self)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPIllIndependent_GetOptimalParameters(self, v)

    def __init__(self):
        _clop_swig.CPIllIndependent_swiginit(self, _clop_swig.new_CPIllIndependent())
    __swig_destroy__ = _clop_swig.delete_CPIllIndependent

# Register CPIllIndependent in _clop_swig:
_clop_swig.CPIllIndependent_swigregister(CPIllIndependent)
class CPIllCorrelated(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetStrength(self, v):
        return _clop_swig.CPIllCorrelated_GetStrength(self, v)

    def GetDimensions(self):
        return _clop_swig.CPIllCorrelated_GetDimensions(self)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPIllCorrelated_GetOptimalParameters(self, v)

    def __init__(self):
        _clop_swig.CPIllCorrelated_swiginit(self, _clop_swig.new_CPIllCorrelated())
    __swig_destroy__ = _clop_swig.delete_CPIllCorrelated

# Register CPIllCorrelated in _clop_swig:
_clop_swig.CPIllCorrelated_swigregister(CPIllCorrelated)
class CPPower1D(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, SquareMagnitude=0.2, Power=20.0):
        _clop_swig.CPPower1D_swiginit(self, _clop_swig.new_CPPower1D(SquareMagnitude, Power))

    def GetStrength(self, v):
        return _clop_swig.CPPower1D_GetStrength(self, v)

    def GetDimensions(self):
        return _clop_swig.CPPower1D_GetDimensions(self)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPPower1D_GetOptimalParameters(self, v)
    __swig_destroy__ = _clop_swig.delete_CPPower1D

# Register CPPower1D in _clop_swig:
_clop_swig.CPPower1D_swigregister(CPPower1D)
class CPMultiple(CArtificialProblem):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Multiplier, problem):
        _clop_swig.CPMultiple_swiginit(self, _clop_swig.new_CPMultiple(Multiplier, problem))

                #check-pythonappend CPMultiple::CPMultiple
        self.problem_reference = args[1]




    def GetStrength(self, v):
        return _clop_swig.CPMultiple_GetStrength(self, v)

    def GetDimensions(self):
        return _clop_swig.CPMultiple_GetDimensions(self)

    def GetOptimalParameters(self, v):
        return _clop_swig.CPMultiple_GetOptimalParameters(self, v)
    __swig_destroy__ = _clop_swig.delete_CPMultiple

# Register CPMultiple in _clop_swig:
_clop_swig.CPMultiple_swigregister(CPMultiple)
class CObserver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, results):
        _clop_swig.CObserver_swiginit(self, _clop_swig.new_CObserver(results))

    def OnReset(self):
        return _clop_swig.CObserver_OnReset(self)

    def OnSample(self):
        return _clop_swig.CObserver_OnSample(self)

    def OnOutcome(self, i):
        return _clop_swig.CObserver_OnOutcome(self, i)

    def OnRefresh(self):
        return _clop_swig.CObserver_OnRefresh(self)
    __swig_destroy__ = _clop_swig.delete_CObserver

# Register CObserver in _clop_swig:
_clop_swig.CObserver_swigregister(CObserver)
class CRegression(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, results, pf):
        _clop_swig.CRegression_swiginit(self, _clop_swig.new_CRegression(results, pf))

                #check-pythonappend CRegression::CRegression
        self.results_reference = args[0]
        self.pf_reference = args[1]




    def GetPF(self):
        return _clop_swig.CRegression_GetPF(self)

    def SetDrawRating(self, r):
        return _clop_swig.CRegression_SetDrawRating(self, r)

    def ResultProbability(self, Rating, outcome):
        return _clop_swig.CRegression_ResultProbability(self, Rating, outcome)

    def WinRate(self, Rating):
        return _clop_swig.CRegression_WinRate(self, Rating)

    def Rating(self, WinRate):
        return _clop_swig.CRegression_Rating(self, WinRate)

    def SetRefreshRate(self, x):
        return _clop_swig.CRegression_SetRefreshRate(self, x)

    def Refresh(self):
        return _clop_swig.CRegression_Refresh(self)

    def MAP(self):
        return _clop_swig.CRegression_MAP(self)

    def GaussianSample(self, rnd, vParam):
        return _clop_swig.CRegression_GaussianSample(self, rnd, vParam)

    def MCMCSample(self, rnd, vParam, n):
        return _clop_swig.CRegression_MCMCSample(self, rnd, vParam, n)

    def GetParamPositivity(self, i):
        return _clop_swig.CRegression_GetParamPositivity(self, i)

    def GetPosteriorInfo(self, vLocation, Rating, Variance):
        return _clop_swig.CRegression_GetPosteriorInfo(self, vLocation, Rating, Variance)

    def Reserve(self, n):
        return _clop_swig.CRegression_Reserve(self, n)

    def GetSamples(self):
        return _clop_swig.CRegression_GetSamples(self)

    def GetSample(self, i):
        return _clop_swig.CRegression_GetSample(self, i)

    def GetReplications(self, i):
        return _clop_swig.CRegression_GetReplications(self, i)

    def GetSampleData(self, i):
        return _clop_swig.CRegression_GetSampleData(self, i)

    def GetOutcome(self, i):
        return _clop_swig.CRegression_GetOutcome(self, i)

    def GetCount(self, o):
        return _clop_swig.CRegression_GetCount(self, o)

    def GetLocalizationHeight(self):
        return _clop_swig.CRegression_GetLocalizationHeight(self)

    def GetLocalizationPower(self):
        return _clop_swig.CRegression_GetLocalizationPower(self)

    def GetMaxWeightIterations(self):
        return _clop_swig.CRegression_GetMaxWeightIterations(self)

    def SetLocalizationHeight(self, h):
        return _clop_swig.CRegression_SetLocalizationHeight(self, h)

    def SetLocalizationPower(self, p):
        return _clop_swig.CRegression_SetLocalizationPower(self, p)

    def SetMaxWeightIterations(self, M):
        return _clop_swig.CRegression_SetMaxWeightIterations(self, M)

    def SetAutoLocalize(self, f):
        return _clop_swig.CRegression_SetAutoLocalize(self, f)

    def SetUniformWeights(self):
        return _clop_swig.CRegression_SetUniformWeights(self)

    def LocalizationIteration(self):
        return _clop_swig.CRegression_LocalizationIteration(self)

    def ComputeLocalWeights(self):
        return _clop_swig.CRegression_ComputeLocalWeights(self)

    def GetMeanAndDeviation(self, Mean, Deviation):
        return _clop_swig.CRegression_GetMeanAndDeviation(self, Mean, Deviation)

    def GetSampleWeight(self, i):
        return _clop_swig.CRegression_GetSampleWeight(self, i)

    def GetLogWeight(self, vx):
        return _clop_swig.CRegression_GetLogWeight(self, vx)

    def GetWeight(self, vx):
        return _clop_swig.CRegression_GetWeight(self, vx)

    def GetTotalWeight(self):
        return _clop_swig.CRegression_GetTotalWeight(self)

    def GetTotalWeightedSample(self):
        return _clop_swig.CRegression_GetTotalWeightedSample(self)

    def GetAverageSample(self, vx):
        return _clop_swig.CRegression_GetAverageSample(self, vx)
    __swig_destroy__ = _clop_swig.delete_CRegression

# Register CRegression in _clop_swig:
_clop_swig.CRegression_swigregister(CRegression)
class CParametricFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetDimensions(self):
        return _clop_swig.CParametricFunction_GetDimensions(self)

    def GetParameters(self):
        return _clop_swig.CParametricFunction_GetParameters(self)

    def DotProduct(self, vParam, vx):
        return _clop_swig.CParametricFunction_DotProduct(self, vParam, vx)

    def GetValue(self, vParam, vx):
        return _clop_swig.CParametricFunction_GetValue(self, vParam, vx)

    def GetMax(self, vParam, vx):
        return _clop_swig.CParametricFunction_GetMax(self, vParam, vx)

    def GetMonomials(self, vx, vMonomial):
        return _clop_swig.CParametricFunction_GetMonomials(self, vx, vMonomial)

    def GetGradient(self, vParam, vx, vG):
        return _clop_swig.CParametricFunction_GetGradient(self, vParam, vx, vG)

    def GetPriorStrength(self):
        return _clop_swig.CParametricFunction_GetPriorStrength(self)

    def SetPriorStrength(self, Strength):
        return _clop_swig.CParametricFunction_SetPriorStrength(self, Strength)

    def GetPriorParam(self, vParam):
        return _clop_swig.CParametricFunction_GetPriorParam(self, vParam)

    def GetPrior(self, vParam):
        return _clop_swig.CParametricFunction_GetPrior(self, vParam)

    def GetPriorGradient(self, vParam, vGradient):
        return _clop_swig.CParametricFunction_GetPriorGradient(self, vParam, vGradient)

    def GetPriorHessian(self, vParam, vHessian):
        return _clop_swig.CParametricFunction_GetPriorHessian(self, vParam, vHessian)
    __swig_destroy__ = _clop_swig.delete_CParametricFunction

# Register CParametricFunction in _clop_swig:
_clop_swig.CParametricFunction_swigregister(CParametricFunction)
class CPFIndependentQuadratic(CParametricFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions):
        _clop_swig.CPFIndependentQuadratic_swiginit(self, _clop_swig.new_CPFIndependentQuadratic(Dimensions))

    def GetValue(self, vParam, vx):
        return _clop_swig.CPFIndependentQuadratic_GetValue(self, vParam, vx)

    def GetMax(self, vParam, vx):
        return _clop_swig.CPFIndependentQuadratic_GetMax(self, vParam, vx)

    def GetMonomials(self, vx, vMonomial):
        return _clop_swig.CPFIndependentQuadratic_GetMonomials(self, vx, vMonomial)

    def GetGradient(self, vParam, vx, vG):
        return _clop_swig.CPFIndependentQuadratic_GetGradient(self, vParam, vx, vG)
    __swig_destroy__ = _clop_swig.delete_CPFIndependentQuadratic

# Register CPFIndependentQuadratic in _clop_swig:
_clop_swig.CPFIndependentQuadratic_swigregister(CPFIndependentQuadratic)
class CPFQuadratic(CParametricFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions):
        _clop_swig.CPFQuadratic_swiginit(self, _clop_swig.new_CPFQuadratic(Dimensions))

    def GetValue(self, vParam, vx):
        return _clop_swig.CPFQuadratic_GetValue(self, vParam, vx)

    def GetMax(self, vParam, vx):
        return _clop_swig.CPFQuadratic_GetMax(self, vParam, vx)

    def GetMonomials(self, vx, vMonomial):
        return _clop_swig.CPFQuadratic_GetMonomials(self, vx, vMonomial)

    def GetGradient(self, vParam, vx, vG):
        return _clop_swig.CPFQuadratic_GetGradient(self, vParam, vx, vG)

    def GetHessian(self, vParam, vH):
        return _clop_swig.CPFQuadratic_GetHessian(self, vParam, vH)
    __swig_destroy__ = _clop_swig.delete_CPFQuadratic

# Register CPFQuadratic in _clop_swig:
_clop_swig.CPFQuadratic_swigregister(CPFQuadratic)
class CPFCubic(CParametricFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions):
        _clop_swig.CPFCubic_swiginit(self, _clop_swig.new_CPFCubic(Dimensions))

    def GetValue(self, vParam, vx):
        return _clop_swig.CPFCubic_GetValue(self, vParam, vx)

    def GetMax(self, vParam, vx):
        return _clop_swig.CPFCubic_GetMax(self, vParam, vx)

    def GetMonomials(self, vx, vMonomial):
        return _clop_swig.CPFCubic_GetMonomials(self, vx, vMonomial)

    def GetGradient(self, vParam, vx, vG):
        return _clop_swig.CPFCubic_GetGradient(self, vParam, vx, vG)
    __swig_destroy__ = _clop_swig.delete_CPFCubic

# Register CPFCubic in _clop_swig:
_clop_swig.CPFCubic_swigregister(CPFCubic)
class CPFGaussian(CParametricFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions, Resolution=9):
        _clop_swig.CPFGaussian_swiginit(self, _clop_swig.new_CPFGaussian(Dimensions, Resolution))

    def GetValue(self, vParam, vx):
        return _clop_swig.CPFGaussian_GetValue(self, vParam, vx)

    def GetMonomials(self, vx, vMonomial):
        return _clop_swig.CPFGaussian_GetMonomials(self, vx, vMonomial)

    def GetGradient(self, vParam, vx, vG):
        return _clop_swig.CPFGaussian_GetGradient(self, vParam, vx, vG)
    __swig_destroy__ = _clop_swig.delete_CPFGaussian

# Register CPFGaussian in _clop_swig:
_clop_swig.CPFGaussian_swigregister(CPFGaussian)
class CPFConcave(CParametricFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions, Resolution=9):
        _clop_swig.CPFConcave_swiginit(self, _clop_swig.new_CPFConcave(Dimensions, Resolution))

    def GetMonomials(self, vx, vMonomial):
        return _clop_swig.CPFConcave_GetMonomials(self, vx, vMonomial)

    def GetGradient(self, vParam, vx, vG):
        return _clop_swig.CPFConcave_GetGradient(self, vParam, vx, vG)

    def GetPriorParam(self, vParam):
        return _clop_swig.CPFConcave_GetPriorParam(self, vParam)

    def GetPrior(self, vParam):
        return _clop_swig.CPFConcave_GetPrior(self, vParam)

    def GetPriorGradient(self, vParam, vGradient):
        return _clop_swig.CPFConcave_GetPriorGradient(self, vParam, vGradient)

    def GetPriorHessian(self, vParam, vHessian):
        return _clop_swig.CPFConcave_GetPriorHessian(self, vParam, vHessian)
    __swig_destroy__ = _clop_swig.delete_CPFConcave

# Register CPFConcave in _clop_swig:
_clop_swig.CPFConcave_swigregister(CPFConcave)
class CSamplingPolicy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Seed(self, n):
        return _clop_swig.CSamplingPolicy_Seed(self, n)

    def Reserve(self, n):
        return _clop_swig.CSamplingPolicy_Reserve(self, n)

    def NextSample(self, i):
        return _clop_swig.CSamplingPolicy_NextSample(self, i)

    def IsFlexible(self):
        return _clop_swig.CSamplingPolicy_IsFlexible(self)
    __swig_destroy__ = _clop_swig.delete_CSamplingPolicy

# Register CSamplingPolicy in _clop_swig:
_clop_swig.CSamplingPolicy_swigregister(CSamplingPolicy)
class CSPUniform(CSamplingPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions, Min=-1.0, Max=1.0):
        _clop_swig.CSPUniform_swiginit(self, _clop_swig.new_CSPUniform(Dimensions, Min, Max))

    def Seed(self, n):
        return _clop_swig.CSPUniform_Seed(self, n)

    def NextSample(self, i):
        return _clop_swig.CSPUniform_NextSample(self, i)
    __swig_destroy__ = _clop_swig.delete_CSPUniform

# Register CSPUniform in _clop_swig:
_clop_swig.CSPUniform_swigregister(CSPUniform)
class CSPDyadic(CSamplingPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Dimensions):
        _clop_swig.CSPDyadic_swiginit(self, _clop_swig.new_CSPDyadic(Dimensions))

    def NextSample(self, i):
        return _clop_swig.CSPDyadic_NextSample(self, i)
    __swig_destroy__ = _clop_swig.delete_CSPDyadic

# Register CSPDyadic in _clop_swig:
_clop_swig.CSPDyadic_swigregister(CSPDyadic)
class CSPUCB(CSamplingPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg, alpha):
        _clop_swig.CSPUCB_swiginit(self, _clop_swig.new_CSPUCB(reg, alpha))

    def Seed(self, n):
        return _clop_swig.CSPUCB_Seed(self, n)

    def NextSample(self, i):
        return _clop_swig.CSPUCB_NextSample(self, i)
    __swig_destroy__ = _clop_swig.delete_CSPUCB

# Register CSPUCB in _clop_swig:
_clop_swig.CSPUCB_swigregister(CSPUCB)
class CSPVOptimal(CSamplingPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg, dfvar, Trials=0):
        _clop_swig.CSPVOptimal_swiginit(self, _clop_swig.new_CSPVOptimal(reg, dfvar, Trials))

                #check-pythonappend CSPVOptimal::CSPVOptimal
        self.reg_reference = args[0]
        self.dfvar_reference = args[1]




    def Seed(self, n):
        return _clop_swig.CSPVOptimal_Seed(self, n)

    def NextSample(self, i):
        return _clop_swig.CSPVOptimal_NextSample(self, i)

    def Reserve(self, n):
        return _clop_swig.CSPVOptimal_Reserve(self, n)
    __swig_destroy__ = _clop_swig.delete_CSPVOptimal

# Register CSPVOptimal in _clop_swig:
_clop_swig.CSPVOptimal_swigregister(CSPVOptimal)
class CSPQLRMax(CSamplingPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg):
        _clop_swig.CSPQLRMax_swiginit(self, _clop_swig.new_CSPQLRMax(reg))

                #check-pythonappend CSPQLRMax::CSPQLRMax
        self.reg_reference = args[0]




    def Seed(self, n):
        return _clop_swig.CSPQLRMax_Seed(self, n)

    def NextSample(self, i):
        return _clop_swig.CSPQLRMax_NextSample(self, i)
    __swig_destroy__ = _clop_swig.delete_CSPQLRMax

# Register CSPQLRMax in _clop_swig:
_clop_swig.CSPQLRMax_swigregister(CSPQLRMax)
class CSPComposite(CSamplingPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg, sp1, sp2, MinSamples):
        _clop_swig.CSPComposite_swiginit(self, _clop_swig.new_CSPComposite(reg, sp1, sp2, MinSamples))

                #check-pythonappend CSPComposite::CSPComposite
        self.reg_reference = args[0]
        self.sp1_reference = args[1]
        self.sp2_reference = args[2]




    def Seed(self, n):
        return _clop_swig.CSPComposite_Seed(self, n)

    def NextSample(self, i):
        return _clop_swig.CSPComposite_NextSample(self, i)
    __swig_destroy__ = _clop_swig.delete_CSPComposite

# Register CSPComposite in _clop_swig:
_clop_swig.CSPComposite_swigregister(CSPComposite)
class CSPCOptimal(CSamplingPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _clop_swig.CSPCOptimal_swiginit(self, _clop_swig.new_CSPCOptimal(*args))

    def GetMin(self):
        return _clop_swig.CSPCOptimal_GetMin(self)

    def GetMax(self):
        return _clop_swig.CSPCOptimal_GetMax(self)

    def NextSample(self, i):
        return _clop_swig.CSPCOptimal_NextSample(self, i)
    __swig_destroy__ = _clop_swig.delete_CSPCOptimal

# Register CSPCOptimal in _clop_swig:
_clop_swig.CSPCOptimal_swigregister(CSPCOptimal)
class CSPCOptimalMAP(CSamplingPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg):
        _clop_swig.CSPCOptimalMAP_swiginit(self, _clop_swig.new_CSPCOptimalMAP(reg))

    def NextSample(self, i):
        return _clop_swig.CSPCOptimalMAP_NextSample(self, i)
    __swig_destroy__ = _clop_swig.delete_CSPCOptimalMAP

# Register CSPCOptimalMAP in _clop_swig:
_clop_swig.CSPCOptimalMAP_swigregister(CSPCOptimalMAP)
class CSPWeight(CSamplingPolicy):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg, ReplicationThreshold=0, nMCMC=100):
        _clop_swig.CSPWeight_swiginit(self, _clop_swig.new_CSPWeight(reg, ReplicationThreshold, nMCMC))

    def Seed(self, n):
        return _clop_swig.CSPWeight_Seed(self, n)

    def NextSample(self, i):
        return _clop_swig.CSPWeight_NextSample(self, i)
    __swig_destroy__ = _clop_swig.delete_CSPWeight

# Register CSPWeight in _clop_swig:
_clop_swig.CSPWeight_swigregister(CSPWeight)
class CDiffFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetDimensions(self):
        return _clop_swig.CDiffFunction_GetDimensions(self)

    def GetOutput(self, vInput):
        return _clop_swig.CDiffFunction_GetOutput(self, vInput)

    def ComputeGradient(self):
        return _clop_swig.CDiffFunction_ComputeGradient(self)

    def GetGradient(self):
        return _clop_swig.CDiffFunction_GetGradient(self)

    def ComputeHessian(self):
        return _clop_swig.CDiffFunction_ComputeHessian(self)

    def GetHessian(self):
        return _clop_swig.CDiffFunction_GetHessian(self)

    def Normalize(self, x):
        return _clop_swig.CDiffFunction_Normalize(self, x)

    def Newton(self, vMax, fTrace=False):
        return _clop_swig.CDiffFunction_Newton(self, vMax, fTrace)

    def SteepestDescent(self, vMax, fTrace=False):
        return _clop_swig.CDiffFunction_SteepestDescent(self, vMax, fTrace)

    def CG(self, vMax, fTrace=False):
        return _clop_swig.CDiffFunction_CG(self, vMax, fTrace)

    def LineOpt(self, vx0, vDir, fTrace=False):
        return _clop_swig.CDiffFunction_LineOpt(self, vx0, vDir, fTrace)
    __swig_destroy__ = _clop_swig.delete_CDiffFunction

# Register CDiffFunction in _clop_swig:
_clop_swig.CDiffFunction_swigregister(CDiffFunction)
class CDFVariance(CDiffFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg):
        _clop_swig.CDFVariance_swiginit(self, _clop_swig.new_CDFVariance(reg))

    def GetOutput(self, v):
        return _clop_swig.CDFVariance_GetOutput(self, v)

    def ComputeGradient(self):
        return _clop_swig.CDFVariance_ComputeGradient(self)

    def GetGradient(self):
        return _clop_swig.CDFVariance_GetGradient(self)

    def GetHessian(self):
        return _clop_swig.CDFVariance_GetHessian(self)

    def Normalize(self, x):
        return _clop_swig.CDFVariance_Normalize(self, x)

    def SelectAtRandom(self, rnd):
        return _clop_swig.CDFVariance_SelectAtRandom(self, rnd)

    def GetVariance(self):
        return _clop_swig.CDFVariance_GetVariance(self)

    def GetMinSamples(self):
        return _clop_swig.CDFVariance_GetMinSamples(self)

    def SetMinSamples(self, n):
        return _clop_swig.CDFVariance_SetMinSamples(self, n)
    __swig_destroy__ = _clop_swig.delete_CDFVariance

# Register CDFVariance in _clop_swig:
_clop_swig.CDFVariance_swigregister(CDFVariance)
class CDFConfidence(CDFVariance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg):
        _clop_swig.CDFConfidence_swiginit(self, _clop_swig.new_CDFConfidence(reg))

    def ComputeVariance(self, vInput):
        return _clop_swig.CDFConfidence_ComputeVariance(self, vInput)

    def GetDeviation(self):
        return _clop_swig.CDFConfidence_GetDeviation(self)

    def GetVariance(self):
        return _clop_swig.CDFConfidence_GetVariance(self)
    __swig_destroy__ = _clop_swig.delete_CDFConfidence

# Register CDFConfidence in _clop_swig:
_clop_swig.CDFConfidence_swigregister(CDFConfidence)
class CDFVarianceAlpha(CDFConfidence):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg, alpha=0.5):
        _clop_swig.CDFVarianceAlpha_swiginit(self, _clop_swig.new_CDFVarianceAlpha(reg, alpha))

                #check-pythonappend CDFVarianceAlpha::CDFVarianceAlpha
        self.reg_reference = args[0]




    def GetOutput(self, vInput):
        return _clop_swig.CDFVarianceAlpha_GetOutput(self, vInput)

    def ComputeGradient(self):
        return _clop_swig.CDFVarianceAlpha_ComputeGradient(self)
    __swig_destroy__ = _clop_swig.delete_CDFVarianceAlpha

# Register CDFVarianceAlpha in _clop_swig:
_clop_swig.CDFVarianceAlpha_swigregister(CDFVarianceAlpha)
class CDFVarianceDelta(CDFVariance):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg):
        _clop_swig.CDFVarianceDelta_swiginit(self, _clop_swig.new_CDFVarianceDelta(reg))

                #check-pythonappend CDFVarianceDelta::CDFVarianceDelta
        self.reg_reference = args[0]




    def GetOutput(self, vInput):
        return _clop_swig.CDFVarianceDelta_GetOutput(self, vInput)

    def ComputeGradient(self):
        return _clop_swig.CDFVarianceDelta_ComputeGradient(self)

    def GetVariance(self):
        return _clop_swig.CDFVarianceDelta_GetVariance(self)
    __swig_destroy__ = _clop_swig.delete_CDFVarianceDelta

# Register CDFVarianceDelta in _clop_swig:
_clop_swig.CDFVarianceDelta_swigregister(CDFVarianceDelta)
class CMaxEstimator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Reserve(self, n):
        return _clop_swig.CMaxEstimator_Reserve(self, n)

    def MaxParameter(self, vMax):
        return _clop_swig.CMaxEstimator_MaxParameter(self, vMax)
    __swig_destroy__ = _clop_swig.delete_CMaxEstimator

    def __init__(self):
        _clop_swig.CMaxEstimator_swiginit(self, _clop_swig.new_CMaxEstimator())

# Register CMaxEstimator in _clop_swig:
_clop_swig.CMaxEstimator_swigregister(CMaxEstimator)
class CMERegressionMAPMax(CMaxEstimator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg):
        _clop_swig.CMERegressionMAPMax_swiginit(self, _clop_swig.new_CMERegressionMAPMax(reg))

                #check-pythonappend CMERegressionMAPMax::CMERegressionMAPMax
        self.reg_reference = args[0]




    def MaxParameter(self, vMax):
        return _clop_swig.CMERegressionMAPMax_MaxParameter(self, vMax)
    __swig_destroy__ = _clop_swig.delete_CMERegressionMAPMax

# Register CMERegressionMAPMax in _clop_swig:
_clop_swig.CMERegressionMAPMax_swigregister(CMERegressionMAPMax)
class CMEQLRLCB(CMaxEstimator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg, alpha=0.0):
        _clop_swig.CMEQLRLCB_swiginit(self, _clop_swig.new_CMEQLRLCB(reg, alpha))

                #check-pythonappend CMEQLRLCB::CMEQLRLCB
        self.reg_reference = args[0]




    def MaxParameter(self, vMax):
        return _clop_swig.CMEQLRLCB_MaxParameter(self, vMax)
    __swig_destroy__ = _clop_swig.delete_CMEQLRLCB

# Register CMEQLRLCB in _clop_swig:
_clop_swig.CMEQLRLCB_swigregister(CMEQLRLCB)
class CMESampleMean(CMaxEstimator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, reg):
        _clop_swig.CMESampleMean_swiginit(self, _clop_swig.new_CMESampleMean(reg))

    def MaxParameter(self, vMax):
        return _clop_swig.CMESampleMean_MaxParameter(self, vMax)
    __swig_destroy__ = _clop_swig.delete_CMESampleMean

# Register CMESampleMean in _clop_swig:
_clop_swig.CMESampleMean_swigregister(CMESampleMean)
class CBAST(CSamplingPolicy, CMaxEstimator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, results, Exploration=1.0):
        _clop_swig.CBAST_swiginit(self, _clop_swig.new_CBAST(results, Exploration))

                #check-pythonappend CBAST::CBAST
        self.results_reference = args[0]




    def NextSample(self, i):
        return _clop_swig.CBAST_NextSample(self, i)

    def IsFlexible(self):
        return _clop_swig.CBAST_IsFlexible(self)

    def MaxParameter(self, vMax):
        return _clop_swig.CBAST_MaxParameter(self, vMax)

    def Reserve(self, n):
        return _clop_swig.CBAST_Reserve(self, n)
    __swig_destroy__ = _clop_swig.delete_CBAST

# Register CBAST in _clop_swig:
_clop_swig.CBAST_swigregister(CBAST)
class CCrossEntropy(CSamplingPolicy, CMaxEstimator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, results, Smoothing=1.0, DynamicSmoothing=0.1, fDistributionSmoothing=True, PopulationSize=100, SelectionSize=10, InitialBatchSize=10, BatchGrowth=1.15, fDiagonal=True):
        _clop_swig.CCrossEntropy_swiginit(self, _clop_swig.new_CCrossEntropy(results, Smoothing, DynamicSmoothing, fDistributionSmoothing, PopulationSize, SelectionSize, InitialBatchSize, BatchGrowth, fDiagonal))

                #check-pythonappend CCrossEntropy::CCrossEntropy
        self.results_reference = args[0]




    def Seed(self, n):
        return _clop_swig.CCrossEntropy_Seed(self, n)

    def NextSample(self, i):
        return _clop_swig.CCrossEntropy_NextSample(self, i)

    def IsFlexible(self):
        return _clop_swig.CCrossEntropy_IsFlexible(self)

    def MaxParameter(self, vMax):
        return _clop_swig.CCrossEntropy_MaxParameter(self, vMax)
    __swig_destroy__ = _clop_swig.delete_CCrossEntropy

# Register CCrossEntropy in _clop_swig:
_clop_swig.CCrossEntropy_swigregister(CCrossEntropy)
class CSPSA(CSamplingPolicy, CMaxEstimator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, results, a=0.05, A=0.0, c=0.00001, alpha=0.602, gamma=0.101):
        _clop_swig.CSPSA_swiginit(self, _clop_swig.new_CSPSA(results, a, A, c, alpha, gamma))

                #check-pythonappend CSPSA::CSPSA
        self.results_reference = args[0]




    def Seed(self, n):
        return _clop_swig.CSPSA_Seed(self, n)

    def NextSample(self, i):
        return _clop_swig.CSPSA_NextSample(self, i)

    def IsFlexible(self):
        return _clop_swig.CSPSA_IsFlexible(self)

    def MaxParameter(self, vMax):
        return _clop_swig.CSPSA_MaxParameter(self, vMax)
    __swig_destroy__ = _clop_swig.delete_CSPSA

# Register CSPSA in _clop_swig:
_clop_swig.CSPSA_swigregister(CSPSA)
class CRSPSA(CSamplingPolicy, CMaxEstimator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, results, BatchSize=100, BatchGrowth=1.15, EtaPlus=1.5, EtaMinus=0.4, DeltaMin=0.001, DeltaMax=0.5, Delta0=0.5, Rho=2.0):
        _clop_swig.CRSPSA_swiginit(self, _clop_swig.new_CRSPSA(results, BatchSize, BatchGrowth, EtaPlus, EtaMinus, DeltaMin, DeltaMax, Delta0, Rho))

                #check-pythonappend CRSPSA::CRSPSA
        self.results_reference = args[0]




    def Seed(self, n):
        return _clop_swig.CRSPSA_Seed(self, n)

    def NextSample(self, i):
        return _clop_swig.CRSPSA_NextSample(self, i)

    def IsFlexible(self):
        return _clop_swig.CRSPSA_IsFlexible(self)

    def MaxParameter(self, vMax):
        return _clop_swig.CRSPSA_MaxParameter(self, vMax)
    __swig_destroy__ = _clop_swig.delete_CRSPSA

# Register CRSPSA in _clop_swig:
_clop_swig.CRSPSA_swigregister(CRSPSA)
class CRepeatThreads(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Repeats, Samples, pcpl=None):
        _clop_swig.CRepeatThreads_swiginit(self, _clop_swig.new_CRepeatThreads(Repeats, Samples, pcpl))

                #check-pythonappend CRepeatThreads::CRepeatThreads
        self.prtl_reference = args[2]




    def AddThread(self, artexp):
        return _clop_swig.CRepeatThreads_AddThread(self, artexp)

    def AddCheckPoint(self, Samples):
        return _clop_swig.CRepeatThreads_AddCheckPoint(self, Samples)

    def GetCheckPoints(self):
        return _clop_swig.CRepeatThreads_GetCheckPoints(self)

    def GetCheckPointData(self, i):
        return _clop_swig.CRepeatThreads_GetCheckPointData(self, i)

    def Start(self):
        return _clop_swig.CRepeatThreads_Start(self)

    def WaitForTermination(self):
        return _clop_swig.CRepeatThreads_WaitForTermination(self)
    __swig_destroy__ = _clop_swig.delete_CRepeatThreads

# Register CRepeatThreads in _clop_swig:
_clop_swig.CRepeatThreads_swigregister(CRepeatThreads)
class CArtificialExperiment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    problem = property(_clop_swig.CArtificialExperiment_problem_get, _clop_swig.CArtificialExperiment_problem_set)
    sp = property(_clop_swig.CArtificialExperiment_sp_get, _clop_swig.CArtificialExperiment_sp_set)
    me = property(_clop_swig.CArtificialExperiment_me_get, _clop_swig.CArtificialExperiment_me_set)
    results = property(_clop_swig.CArtificialExperiment_results_get, _clop_swig.CArtificialExperiment_results_set)

    def __init__(self, problem, sp, me, results):
        _clop_swig.CArtificialExperiment_swiginit(self, _clop_swig.new_CArtificialExperiment(problem, sp, me, results))

                #check-pythonappend CArtificialExperiment::CArtificialExperiment
        self.problem_reference = args[0]
        self.sp_reference = args[1]
        self.me_reference = args[2]
        self.results_reference = args[3]




    def Reserve(self, n):
        return _clop_swig.CArtificialExperiment_Reserve(self, n)
    __swig_destroy__ = _clop_swig.delete_CArtificialExperiment

# Register CArtificialExperiment in _clop_swig:
_clop_swig.CArtificialExperiment_swigregister(CArtificialExperiment)
class CCheckPointData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, TotalRepeats, Samples, pcpl):
        _clop_swig.CCheckPointData_swiginit(self, _clop_swig.new_CCheckPointData(TotalRepeats, Samples, pcpl))

    def Collect(self, Seed, Error, Misses):
        return _clop_swig.CCheckPointData_Collect(self, Seed, Error, Misses)

    def GetRepeats(self):
        return _clop_swig.CCheckPointData_GetRepeats(self)

    def GetSamples(self):
        return _clop_swig.CCheckPointData_GetSamples(self)

    def GetRemainingRepeats(self):
        return _clop_swig.CCheckPointData_GetRemainingRepeats(self)

    def GetMaxErrorSeed(self):
        return _clop_swig.CCheckPointData_GetMaxErrorSeed(self)

    def GetMisses(self):
        return _clop_swig.CCheckPointData_GetMisses(self)

    def GetMaxError(self):
        return _clop_swig.CCheckPointData_GetMaxError(self)

    def GetMeanError(self):
        return _clop_swig.CCheckPointData_GetMeanError(self)

    def GetPercentile(self, x):
        return _clop_swig.CCheckPointData_GetPercentile(self, x)

    def GetVariance(self):
        return _clop_swig.CCheckPointData_GetVariance(self)
    __swig_destroy__ = _clop_swig.delete_CCheckPointData

# Register CCheckPointData in _clop_swig:
_clop_swig.CCheckPointData_swigregister(CCheckPointData)
class CCPListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def OnStart(self, cpd):
        return _clop_swig.CCPListener_OnStart(self, cpd)

    def OnCollect(self, cpd):
        return _clop_swig.CCPListener_OnCollect(self, cpd)

    def OnStop(self, cpd):
        return _clop_swig.CCPListener_OnStop(self, cpd)

    def Continue(self):
        return _clop_swig.CCPListener_Continue(self)
    __swig_destroy__ = _clop_swig.delete_CCPListener

    def __init__(self):
        _clop_swig.CCPListener_swiginit(self, _clop_swig.new_CCPListener())

# Register CCPListener in _clop_swig:
_clop_swig.CCPListener_swigregister(CCPListener)
class CCPLConsole(CCPListener):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Every=1):
        _clop_swig.CCPLConsole_swiginit(self, _clop_swig.new_CCPLConsole(Every))

    def OnStart(self, cpd):
        return _clop_swig.CCPLConsole_OnStart(self, cpd)

    def OnCollect(self, cpd):
        return _clop_swig.CCPLConsole_OnCollect(self, cpd)

    def OnStop(self, cpd):
        return _clop_swig.CCPLConsole_OnStop(self, cpd)

    def Continue(self):
        return _clop_swig.CCPLConsole_Continue(self)
    __swig_destroy__ = _clop_swig.delete_CCPLConsole

# Register CCPLConsole in _clop_swig:
_clop_swig.CCPLConsole_swigregister(CCPLConsole)
class CQLRIO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def DumpSamples(sFileName, reg):
        return _clop_swig.CQLRIO_DumpSamples(sFileName, reg)

    @staticmethod
    def Plot(out, pf, vParam):
        return _clop_swig.CQLRIO_Plot(out, pf, vParam)

    @staticmethod
    def Distrib(*args):
        return _clop_swig.CQLRIO_Distrib(*args)

    def __init__(self):
        _clop_swig.CQLRIO_swiginit(self, _clop_swig.new_CQLRIO())
    __swig_destroy__ = _clop_swig.delete_CQLRIO

# Register CQLRIO in _clop_swig:
_clop_swig.CQLRIO_swigregister(CQLRIO)
class CTikZ(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetOutput(self, out):
        return _clop_swig.CTikZ_SetOutput(self, out)

    def SetScale(self, NewScale):
        return _clop_swig.CTikZ_SetScale(self, NewScale)

    def SetStyle(self, s, R, G, B, sStyle):
        return _clop_swig.CTikZ_SetStyle(self, s, R, G, B, sStyle)

    def SetGrayscale(self, f):
        return _clop_swig.CTikZ_SetGrayscale(self, f)

    def SetCircleN(self, n):
        return _clop_swig.CTikZ_SetCircleN(self, n)

    def SetSplineSamples(self, Samples):
        return _clop_swig.CTikZ_SetSplineSamples(self, Samples)

    def SetSplineD(self, D):
        return _clop_swig.CTikZ_SetSplineD(self, D)

    def Prolog(self):
        return _clop_swig.CTikZ_Prolog(self)

    def Epilog(self):
        return _clop_swig.CTikZ_Epilog(self)

    def Results(self, results, preg=None):
        return _clop_swig.CTikZ_Results(self, results, preg)

    def Key(self, s):
        return _clop_swig.CTikZ_Key(self, s)
    __swig_destroy__ = _clop_swig.delete_CTikZ

# Register CTikZ in _clop_swig:
_clop_swig.CTikZ_swigregister(CTikZ)
class CTikZOneD(CTikZ):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _clop_swig.CTikZOneD_swiginit(self, _clop_swig.new_CTikZOneD())

    def BeginClip(self):
        return _clop_swig.CTikZOneD_BeginClip(self)

    def EndClip(self):
        return _clop_swig.CTikZOneD_EndClip(self)

    def Posterior(self, n, reg, rnd):
        return _clop_swig.CTikZOneD_Posterior(self, n, reg, rnd)

    def PlotTrue(self, problem):
        return _clop_swig.CTikZOneD_PlotTrue(self, problem)

    def MAP(self, reg):
        return _clop_swig.CTikZOneD_MAP(self, reg)

    def Expected(self, reg, Samples, Seed=0):
        return _clop_swig.CTikZOneD_Expected(self, reg, Samples, Seed)

    def Confidence(self, reg, Alpha=-1.96):
        return _clop_swig.CTikZOneD_Confidence(self, reg, Alpha)

    def LCB(self, reg):
        return _clop_swig.CTikZOneD_LCB(self, reg)

    def Frame(self, Samples):
        return _clop_swig.CTikZOneD_Frame(self, Samples)

    def Key(self):
        return _clop_swig.CTikZOneD_Key(self)
    __swig_destroy__ = _clop_swig.delete_CTikZOneD

# Register CTikZOneD in _clop_swig:
_clop_swig.CTikZOneD_swigregister(CTikZOneD)
class CTikZTwoD(CTikZ):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _clop_swig.CTikZTwoD_swiginit(self, _clop_swig.new_CTikZTwoD())

    def SetContourResolution(self, n):
        return _clop_swig.CTikZTwoD_SetContourResolution(self, n)

    def BeginClip(self):
        return _clop_swig.CTikZTwoD_BeginClip(self)

    def EndClip(self):
        return _clop_swig.CTikZTwoD_EndClip(self)

    def Posterior(self, Samples, reg, rnd):
        return _clop_swig.CTikZTwoD_Posterior(self, Samples, reg, rnd)

    def PlotTrue(self, problem):
        return _clop_swig.CTikZTwoD_PlotTrue(self, problem)

    def Contour(self, problem, Levels=8):
        return _clop_swig.CTikZTwoD_Contour(self, problem, Levels)

    def MAP(self, reg):
        return _clop_swig.CTikZTwoD_MAP(self, reg)

    def Key(self):
        return _clop_swig.CTikZTwoD_Key(self)

    def Frame(self, Samples=0, fLabels=True):
        return _clop_swig.CTikZTwoD_Frame(self, Samples, fLabels)
    __swig_destroy__ = _clop_swig.delete_CTikZTwoD

# Register CTikZTwoD in _clop_swig:
_clop_swig.CTikZTwoD_swigregister(CTikZTwoD)
class CMatrixOperations(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cholesky(vMatrix, vCholesky, Size):
        return _clop_swig.CMatrixOperations_Cholesky(vMatrix, vCholesky, Size)

    @staticmethod
    def Inverse(vMatrix, vInverse, Size):
        return _clop_swig.CMatrixOperations_Inverse(vMatrix, vInverse, Size)

    @staticmethod
    def Solve(vMatrix, v, Size):
        return _clop_swig.CMatrixOperations_Solve(vMatrix, v, Size)

    @staticmethod
    def Square(vMatrix, vSquare, Size):
        return _clop_swig.CMatrixOperations_Square(vMatrix, vSquare, Size)

    @staticmethod
    def Jacobi(vMatrix, vEigenVectors, Size):
        return _clop_swig.CMatrixOperations_Jacobi(vMatrix, vEigenVectors, Size)

    @staticmethod
    def JacobiSort(vMatrix, vOrder, Size):
        return _clop_swig.CMatrixOperations_JacobiSort(vMatrix, vOrder, Size)

    def __init__(self):
        _clop_swig.CMatrixOperations_swiginit(self, _clop_swig.new_CMatrixOperations())
    __swig_destroy__ = _clop_swig.delete_CMatrixOperations

# Register CMatrixOperations in _clop_swig:
_clop_swig.CMatrixOperations_swigregister(CMatrixOperations)

