/////////////////////////////////////////////////////////////////////////////
//
// CDFConfidence.cpp
//
// RÃ©mi Coulom
//
// March, 2009
//
/////////////////////////////////////////////////////////////////////////////
#include "CDFConfidence.h"
#include "CRegression.h"

/////////////////////////////////////////////////////////////////////////////
// Constructor
/////////////////////////////////////////////////////////////////////////////
CDFConfidence::CDFConfidence(CRegression &reg):
 CDFVariance(reg),
 vz(Dimensions),
 vZ(Dimensions),
 vX(Parameters),
 vSigmaX(Parameters)
{
}

/////////////////////////////////////////////////////////////////////////////
// Compute rating and its variance (r, var, dev)
/////////////////////////////////////////////////////////////////////////////
void CDFConfidence::ComputeVariance(const double *pInput)
{
 pvx = pInput;
 const double *vParamMAP = reg.MAP();
 reg.GetPF().GetGradient(vParamMAP, pvx, &vz[0]);
 reg.GetPF().GetMonomials(pvx, &vX[0]);
 r = reg.GetPF().DotProduct(vParamMAP, &vX[0]);
 vSigmaX = vX;
 CholeskySolve(vSigmaX);
 var = reg.GetPF().DotProduct(&vX[0], &vSigmaX[0]);
 dev = std::sqrt(var);
}

/////////////////////////////////////////////////////////////////////////////
// Compute vZ = dv/dx (*0.5?)
/////////////////////////////////////////////////////////////////////////////
void CDFConfidence::ComputeZ()
{
 reg.GetPF().GetGradient(&vSigmaX[0], pvx, &vZ[0]);
}
