diff --git a/.devnotes b/.devnotes
index d3bca8c..ed9da1d 100644
--- a/.devnotes
+++ b/.devnotes
@@ -1,8 +1,6 @@
 Important todos:
     - added guards and correct messaging for uint128
-    - REPAIR FKIGN UCI WITH GO FEN COMMAND!!!!!!!
-    - repair uci when go time or go depth are runnig on fen changed position
-    - what is field hallowedTiles in processking moves when checked
+
     - fully implement cmake thread amount detection
     - implement interuptible go depth and go movetime
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index c8a78b1..8b46cb5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -74,6 +74,7 @@ add_executable(Checkmate-Chariot main.cpp
         include/ThreadManagement/stack.h
         include/ThreadManagement/SearchThreadManager.h
         src/SearchThreadManager.cpp
+        include/Evaluation/MoveSortEval.h
 )
 
 find_package(OpenMP)
diff --git a/Tests/searchTests.csv b/Tests/searchTests.csv
index e121745..f92177f 100644
--- a/Tests/searchTests.csv
+++ b/Tests/searchTests.csv
@@ -2,10 +2,4 @@ rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
 rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
 rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
 rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
\ No newline at end of file
diff --git a/Tests/search_perf_out.csv b/Tests/search_perf_out.csv
new file mode 100644
index 0000000..1f8c10c
--- /dev/null
+++ b/Tests/search_perf_out.csv
@@ -0,0 +1,7 @@
+Fen position, depth, result
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 9
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 9
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 4
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 2
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 2
+Average results based on test count:, 5, 5.2
diff --git a/include/Engine.h b/include/Engine.h
index 50754f9..e32396d 100644
--- a/include/Engine.h
+++ b/include/Engine.h
@@ -49,6 +49,8 @@ public:
 
     void SetFenPosition(const std::string&fenStr);
 
+    void SetStartpos();
+
     static const EngineInfo& GetEngineInfo();
 
     bool ApplyMoves(const std::vector<std::string>&UCIMoves);
@@ -86,8 +88,10 @@ private:
 
     Board _board{};
     Board _startingBoard{};
-    OpeningBook _book{"uci_ready_long", OpeningBook::bookFileType::text_uci} ;
+    OpeningBook _book{"uci_ready_long", OpeningBook::bookFileType::text_uci};
 
+    bool _isStartPosPlayed = true;
+    static constexpr std::string_view _startposPrefix = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq";
 public:
     SearchThreadManager TManager{};
 private:
@@ -105,7 +109,7 @@ private:
 
     inline static const EngineInfo engineInfo = {
         .author = "Jakub Lisowski, Warsaw University of Technology",
-        .name = "ChessEngine development version 0.04",
+        .name = "ChessEngine development version 0.05",
         .options = std::map<std::string, const Option *>({
             std::make_pair("Threads", &Threads),
             std::make_pair("Debug Log File", &DebugLogFile),
diff --git a/include/Evaluation/MoveSortEval.h b/include/Evaluation/MoveSortEval.h
new file mode 100644
index 0000000..b9d9b50
--- /dev/null
+++ b/include/Evaluation/MoveSortEval.h
@@ -0,0 +1,62 @@
+//
+// Created by Jlisowskyy on 3/9/24.
+//
+
+#ifndef MOVESORTEVAL_H
+#define MOVESORTEVAL_H
+
+#include <cinttypes>
+
+struct MoveSortEval
+{
+
+    // ------------------------------
+    // Class interaction
+    // ------------------------------
+
+    static uint16_t ApplyAttackFieldEffects(uint16_t eval, const  uint64_t pawnAttacks, const uint64_t startField, const uint64_t targetField)
+    {
+        if ((pawnAttacks & startField) != 0) eval += RunAwayPrize;
+        if ((pawnAttacks & targetField) != 0) eval -= AttackedFigurePenalty;
+
+        return eval;
+    }
+
+    static uint16_t ApplyPromotionEffects(const uint16_t eval, const size_t nFig)
+    {
+        return FigureEval[nFig] + eval;
+    }
+
+    static uint16_t ApplyKilledFigEffect(const uint16_t eval, const size_t attackFig, const size_t killedFig)
+    {
+        return eval + FigureEval[killedFig] - FigureEval[attackFig];
+    }
+
+    // ------------------------------
+    // Class fiels
+    // ------------------------------
+
+    // static constexpr uint16_t ElPassantEval = 100;
+
+    static constexpr uint16_t FigureEval[] = {
+        100,                // wPawnsIndex,
+        300,                // wKnightsIndex,
+        300,                // wBishopsIndex,
+        500,                // wRooksIndex,
+        900,                // wQueensIndex,
+          0,                // wKingIndex,
+        100,                // bPawnsIndex,
+        300,                // bKnightsIndex,
+        300,                // bBishopsIndex,
+        500,                // bRooksIndex,
+        900,                // bQueensIndex,
+          0,                // bKingIndex,
+    };
+
+    static constexpr uint16_t AttackedFigurePenalty = 50;
+    static constexpr uint16_t RunAwayPrize = 50;
+    static constexpr uint16_t KilledFigWhenCheckedPrize = 1000;
+    static constexpr uint16_t DefaultValue = 1500;
+};
+
+#endif //MOVESORTEVAL_H
diff --git a/include/Interface/FenTranslator.h b/include/Interface/FenTranslator.h
index 6ed57cd..c31c962 100644
--- a/include/Interface/FenTranslator.h
+++ b/include/Interface/FenTranslator.h
@@ -19,7 +19,7 @@ struct FenTranslator
 
     static const Board& GetDefault();
 
-    static Board Translate(const std::string&fenPos)
+    static bool Translate(const std::string&fenPos, Board&bd)
     // Function simply translates position from FEN notation into inner representation.
     ;
 
@@ -93,7 +93,7 @@ private:
     };
 
 public:
-    static constexpr const char* StartingPosition = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
+    static constexpr auto StartingPosition = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
 
     static constexpr Board StartBoard = {
         .Castlings = {true, true, true, true},
diff --git a/include/MoveGeneration/Move.h b/include/MoveGeneration/Move.h
index 5f31ba3..e42545a 100644
--- a/include/MoveGeneration/Move.h
+++ b/include/MoveGeneration/Move.h
@@ -122,15 +122,15 @@ public:
         bd.boards[boardIndex] ^= field;
     }
 
-    void SetEval(const int16_t eval)
+    void SetEval(const uint16_t eval)
     {
         _storage |= eval;
     }
 
-    [[nodiscard]] int16_t GetEval() const
+    [[nodiscard]] uint64_t GetEval() const
     {
         static constexpr uint64_t EvalMask = 0xFFFFLLU;
-        return static_cast<int16_t>(_storage & EvalMask);
+        return _storage & EvalMask;
     }
 
     void SetStartField(const uint64_t startField)
diff --git a/include/MoveGeneration/MoveGenerator.h b/include/MoveGeneration/MoveGenerator.h
index 5427e8d..3b730bf 100644
--- a/include/MoveGeneration/MoveGenerator.h
+++ b/include/MoveGeneration/MoveGenerator.h
@@ -19,6 +19,7 @@
 #include "QueenMap.h"
 #include "RookMap.h"
 #include "Move.h"
+#include "../Evaluation/MoveSortEval.h"
 
 struct MoveGenerator {
     using stck = stack<Move, DefaultStackSize>;
@@ -114,20 +115,27 @@ private:
         const uint64_t enemyMap = _mechanics.GetColMap(SwapColor(_board.movColor));
         const uint64_t allyMap = _mechanics.GetColMap(_board.movColor);
 
-        _processFigMoves<GenOnlyAttackMoves, RookMap, true>(results, enemyMap, allyMap, pinnedFigsMap);
+        uint64_t pawnAttacks;
+        if (_board.movColor == WHITE)
+        {
+            pawnAttacks = BlackPawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
+            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap, true>(results, pawnAttacks,
+                                                 enemyMap, allyMap, pinnedFigsMap);
+        }
+        else
+        {
+            pawnAttacks = WhitePawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
+            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap, true>(results, pawnAttacks,
+                                                 enemyMap, allyMap, pinnedFigsMap);
+        }
 
-        _processFigMoves<GenOnlyAttackMoves, BishopMap>(results, enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, RookMap, true>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
 
-        _processFigMoves<GenOnlyAttackMoves, QueenMap>(results, enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, BishopMap>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
 
-        _processFigMoves<GenOnlyAttackMoves, KnightMap>(results, enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, QueenMap>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
 
-        if (_board.movColor == WHITE)
-            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap>(results,
-                                            enemyMap, allyMap, pinnedFigsMap);
-        else
-            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap>(results,
-                                            enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, KnightMap>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
 
         _processPlainKingMoves<GenOnlyAttackMoves>(results, blockedFigMap, allyMap, enemyMap);
 
@@ -150,34 +158,44 @@ private:
             return {pinned, _mechanics.GetAllowedTilesWhenCheckedByNonSliding()};
         }();
 
+
         // helping variable preparation
         const uint64_t enemyMap = _mechanics.GetColMap(SwapColor(_board.movColor));
         const uint64_t allyMap = _mechanics.GetColMap(_board.movColor);
 
         // Specific figure processing
-        _processFigMoves<GenOnlyAttackMoves, RookMap, true, false, false, true>(results,
+
+        uint64_t pawnAttacks;
+        if (_board.movColor == WHITE)
+        {
+            pawnAttacks = BlackPawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
+            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap, true>(results, pawnAttacks,
+                                                 enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
+        }
+        else
+        {
+            pawnAttacks = WhitePawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
+            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap, true>(results, pawnAttacks,
+                                                 enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
+        }
+
+
+        _processFigMoves<GenOnlyAttackMoves, RookMap, true, false, false, true>(results, pawnAttacks,
                                                             enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                             allowedTilesMap);
 
-        _processFigMoves<GenOnlyAttackMoves, BishopMap, false, false, false, true>(results,
+        _processFigMoves<GenOnlyAttackMoves, BishopMap, false, false, false, true>(results, pawnAttacks,
                                                                enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                                allowedTilesMap);
 
-        _processFigMoves<GenOnlyAttackMoves, QueenMap, false, false, false, true>(results,
+        _processFigMoves<GenOnlyAttackMoves, QueenMap, false, false, false, true>(results, pawnAttacks,
                                                               enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                               allowedTilesMap);
 
-        _processFigMoves<GenOnlyAttackMoves, KnightMap, false, false, false, true>(results,
+        _processFigMoves<GenOnlyAttackMoves, KnightMap, false, false, false, true>(results, pawnAttacks,
                                                                enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                                allowedTilesMap);
 
-        if (_board.movColor == WHITE)
-            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap, true>(results,
-                                                  enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
-        else
-            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap, true>(results,
-                                                  enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
-
         _processPlainKingMoves<GenOnlyAttackMoves>(results, blockedFigMap, allyMap, enemyMap);
     }
 
@@ -194,21 +212,22 @@ private:
         class MapT,
         bool isCheck = false
     >
-    void _processPawnMoves(payload& results, const uint64_t enemyMap, const uint64_t allyMap,
+    void _processPawnMoves(payload& results, const uint64_t pawnAttacks, const uint64_t enemyMap, const uint64_t allyMap,
                            const uint64_t pinnedFigMap,
-                           [[maybe_unused]] const uint64_t allowedMoveFillter = 0) {
+                           [[maybe_unused]] const uint64_t allowedMoveFillter = 0)
+    {
         const uint64_t promotingPawns = _board.boards[MapT::GetBoardIndex(0)] & MapT::PromotingMask;
         const uint64_t nonPromotingPawns = _board.boards[MapT::GetBoardIndex(0)] ^ promotingPawns;
 
-        _processFigMoves<GenOnlyAttackMoves, MapT, false, false, true, isCheck, MapT::GetElPassantField>(results, enemyMap,
+        _processFigMoves<GenOnlyAttackMoves, MapT, false, false, true, isCheck, MapT::GetElPassantField>(results, pawnAttacks, enemyMap,
             allyMap, pinnedFigMap, nonPromotingPawns, allowedMoveFillter);
 
         if (promotingPawns)
-            _processFigMoves<GenOnlyAttackMoves, MapT, false, true, true, isCheck>(results, enemyMap,
+            _processFigMoves<GenOnlyAttackMoves, MapT, false, true, true, isCheck>(results, pawnAttacks, enemyMap,
                                                                allyMap, pinnedFigMap, promotingPawns,
                                                                allowedMoveFillter);
 
-        _processElPassantMoves<MapT, isCheck>(results, allyMap | enemyMap, pinnedFigMap,
+        _processElPassantMoves<MapT, isCheck>(results, pawnAttacks, allyMap | enemyMap, pinnedFigMap,
                                               allowedMoveFillter);
     }
 
@@ -217,7 +236,7 @@ private:
         class MapT,
         bool isCheck = false
     >
-    void _processElPassantMoves(payload& results, const uint64_t fullMap, const uint64_t pinnedFigMap,
+    void _processElPassantMoves(payload& results, const uint64_t pawnAttacks, const uint64_t fullMap, const uint64_t pinnedFigMap,
                                 [[maybe_unused]] const uint64_t allowedMoveFillter = 0) {
         if (_board.elPassantField == Board::InvalidElPassantBoard) return;
 
@@ -267,6 +286,7 @@ private:
 
             // preparing and sending move
             Move mv{};
+            mv.SetEval(MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, pawnMap, moveMap));
             mv.SetStartField(ExtractMsbPos(pawnMap));
             mv.SetStartBoardIndex(MapT::GetBoardIndex(0));
             mv.SetTargetField(ExtractMsbPos(moveMap));
@@ -293,7 +313,7 @@ private:
         bool isCheck = false,
         uint64_t (*elPassantFieldDeducer)(uint64_t, uint64_t) = nullptr
     >
-    void _processFigMoves(payload& results, const uint64_t enemyMap, const uint64_t allyMap,
+    void _processFigMoves(payload& results, const uint64_t pawnAttacks, const uint64_t enemyMap, const uint64_t allyMap,
                           const uint64_t pinnedFigMap,
                           [[maybe_unused]] const uint64_t figureSelector = 0,
                           [[maybe_unused]] const uint64_t allowedMovesSelector = 0) {
@@ -338,6 +358,7 @@ private:
             if constexpr (GenOnlyAttackMoves == false)
                 _processNonAttackingMoves<promotePawns, elPassantFieldDeducer>(
                     results,
+                    pawnAttacks,
                     nonAttackingMoves,
                     MapT::GetBoardIndex(_board.movColor),
                     figBoard,
@@ -346,6 +367,7 @@ private:
 
             _processAttackingMoves<promotePawns>(
                 results,
+                pawnAttacks,
                 attackMoves,
                 MapT::GetBoardIndex(_board.movColor),
                 figBoard,
@@ -379,6 +401,7 @@ private:
             if constexpr (GenOnlyAttackMoves == false)
                 _processNonAttackingMoves<promotePawns, elPassantFieldDeducer>(
                     results,
+                    pawnAttacks,
                     nonAttackingMoves,
                     MapT::GetBoardIndex(_board.movColor),
                     figBoard,
@@ -388,6 +411,7 @@ private:
             // TODO: There is exactly one move possible
             _processAttackingMoves<promotePawns>(
                 results,
+                pawnAttacks,
                 attackMoves,
                 MapT::GetBoardIndex(_board.movColor),
                 figBoard,
@@ -403,7 +427,7 @@ private:
         bool promotePawns,
         uint64_t (*elPassantFieldDeducer)(uint64_t, uint64_t) = nullptr
     >
-    void _processNonAttackingMoves(payload& results, uint64_t nonAttackingMoves, const size_t figBoardIndex,
+    void _processNonAttackingMoves(payload& results, const uint64_t pawnAttacks, uint64_t nonAttackingMoves, const size_t figBoardIndex,
                                    const uint64_t startField,
                                    const std::array<bool, Board::CastlingCount + 1>& castlings
     ) const {
@@ -416,6 +440,7 @@ private:
             // simple figure case
             {
                 Move mv{};
+                mv.SetEval(MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard));
                 mv.SetStartField(ExtractMsbPos(startField));
                 mv.SetStartBoardIndex(figBoardIndex);
                 mv.SetTargetField(movePos);
@@ -438,11 +463,17 @@ private:
             {
                 // iterating through upgradable pieces
                 for (size_t i = knightsIndex; i < kingIndex; ++i) {
+                    const size_t targetBoard = _board.movColor * Board::BoardsPerCol + i;
+
                     Move mv{};
+                    uint16_t eval = MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard);
+                    eval = MoveSortEval::ApplyPromotionEffects(eval, targetBoard);
+
+                    mv.SetEval(eval);
                     mv.SetStartField(ExtractMsbPos(startField));
                     mv.SetStartBoardIndex(figBoardIndex);
                     mv.SetTargetField(movePos);
-                    mv.SetTargetBoardIndex(_board.movColor * Board::BoardsPerCol + i);
+                    mv.SetTargetBoardIndex(targetBoard);
                     mv.SetKilledBoardIndex(Board::SentinelBoardIndex);
                     mv.SetElPassantField(Board::InvalidElPassantField);
                     mv.SetCasltingRights(castlings);
@@ -458,7 +489,7 @@ private:
     template<
         bool promotePawns
     >
-    void _processAttackingMoves(payload& results, uint64_t attackingMoves, const size_t figBoardIndex,
+    void _processAttackingMoves(payload& results, const uint64_t pawnAttacks, uint64_t attackingMoves, const size_t figBoardIndex,
                                 const uint64_t startField,
                                 const std::array<bool, Board::CastlingCount + 1>& castlings) const {
         while (attackingMoves) {
@@ -472,6 +503,10 @@ private:
             // simple figure case
             {
                 Move mv{};
+                uint16_t eval = MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard);
+                eval = MoveSortEval::ApplyKilledFigEffect(eval, figBoardIndex, attackedFigBoardIndex);
+
+                mv.SetEval(eval);
                 mv.SetStartField(ExtractMsbPos(startField));
                 mv.SetStartBoardIndex(figBoardIndex);
                 mv.SetTargetField(movePos);
@@ -488,11 +523,19 @@ private:
             {
                 // iterating through upgradable pieces
                 for (size_t i = knightsIndex; i < kingIndex; ++i) {
+                    const size_t targetBoard = _board.movColor * Board::BoardsPerCol + i;
+
                     Move mv{};
+
+                    uint16_t eval = MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard);
+                    eval = MoveSortEval::ApplyKilledFigEffect(eval, figBoardIndex, attackedFigBoardIndex);
+                    eval = MoveSortEval::ApplyPromotionEffects(eval, targetBoard);
+
+                    mv.SetEval(eval);
                     mv.SetStartField(ExtractMsbPos(startField));
                     mv.SetStartBoardIndex(figBoardIndex);
                     mv.SetTargetField(movePos);
-                    mv.SetTargetBoardIndex(_board.movColor * Board::BoardsPerCol + i);
+                    mv.SetTargetBoardIndex(targetBoard);
                     mv.SetKilledBoardIndex(attackedFigBoardIndex);
                     mv.SetKilledFigureField(movePos);
                     mv.SetElPassantField(Board::InvalidElPassantField);
@@ -532,6 +575,7 @@ private:
                 const int newPos = ExtractMsbPos(nonAttackingMoves);
 
                 Move mv{};
+                mv.SetEval(MoveSortEval::DefaultValue);
                 mv.SetStartField(oldKingPos);
                 mv.SetStartBoardIndex(_board.movColor * Board::BoardsPerCol + kingIndex);
                 mv.SetTargetField(newPos);
@@ -555,6 +599,7 @@ private:
                 newKingBoard, SwapColor(_board.movColor));
 
             Move mv{};
+            mv.SetEval(MoveSortEval::DefaultValue);
             mv.SetStartField(oldKingPos);
             mv.SetStartBoardIndex(_board.movColor * Board::BoardsPerCol + kingIndex);
             mv.SetTargetField(newPos);
@@ -584,6 +629,7 @@ private:
                 castlings[_board.movColor * Board::CastlingsPerColor + QueenCastlingIndex] = false;
 
                 Move mv{};
+                mv.SetEval(MoveSortEval::DefaultValue);
                 mv.SetStartField(ExtractMsbPos(Board::DefaultKingBoards[_board.movColor]));
                 mv.SetStartBoardIndex(_board.movColor * Board::BoardsPerCol + kingIndex);
                 mv.SetTargetField(Board::CastlingNewKingPos[castlingIndex]);
diff --git a/include/OpeningBook/OpeningBook.h b/include/OpeningBook/OpeningBook.h
index 3b5dbe1..0a3610c 100644
--- a/include/OpeningBook/OpeningBook.h
+++ b/include/OpeningBook/OpeningBook.h
@@ -38,6 +38,8 @@ struct  OpeningBook
 
     // Possibly in use when array representation will be considered
     void SaveToBinary(const std::string&outputPath) const;
+    [[nodiscard]] bool IsLoadedCorrectly() const;
+
     [[nodiscard]] const std::string& GetRandomNextMove(const std::vector<std::string>&moves) const;
     [[nodiscard]] const std::vector<std::string>& GetAllPossibleNextMoves(const std::vector<std::string>&moves) const;
 
@@ -57,6 +59,7 @@ private:
     // ------------------------------
 
     MoveTRIE _moveTrie{};
+    bool _isCorrectlyLoaded{};
 };
 
 #endif //OPENINGBOOK_H
diff --git a/include/Search/BestMoveSearch.h b/include/Search/BestMoveSearch.h
index 11734d5..043fa6c 100644
--- a/include/Search/BestMoveSearch.h
+++ b/include/Search/BestMoveSearch.h
@@ -104,6 +104,7 @@ private:
         const auto oldCastlings = bd.Castlings;
         const auto oldElPassant = bd.elPassantField;
 
+        _heapSortMoves(moves);
         for(size_t i = 0; i < moves.size; ++i)
         {
             Move::MakeMove(moves[i], bd);
@@ -124,6 +125,7 @@ private:
     }
 
     static void _insertionSort(std::vector<std::pair<int, int>>& list);
+    static void _heapSortMoves(MoveGenerator::payload moves);
 
     // ------------------------------
     // Class fields
diff --git a/src/BestMoveSearch.cpp b/src/BestMoveSearch.cpp
index 283b1be..baa5c51 100644
--- a/src/BestMoveSearch.cpp
+++ b/src/BestMoveSearch.cpp
@@ -17,4 +17,19 @@ void BestMoveSearch::_insertionSort(std::vector<std::pair<int, int>>& list)
         }
         list[j+1] = val;
     }
-}
\ No newline at end of file
+}
+
+void BestMoveSearch::_heapSortMoves(MoveGenerator::payload moves)
+{
+    for (ssize_t i = 1; i < moves.size; ++i)
+    {
+        ssize_t j = i - 1;
+        const auto val = moves[i];
+        while(j >= 0 && moves[j].GetEval() < val.GetEval())
+        {
+            moves.data[j+1] = moves[j];
+            j--;
+        }
+        moves.data[j+1] = val;
+    }
+}
diff --git a/src/Engine.cpp b/src/Engine.cpp
index 11f2aa9..846678a 100644
--- a/src/Engine.cpp
+++ b/src/Engine.cpp
@@ -67,7 +67,26 @@ std::map<std::string, uint64_t> Engine::GetMoveBasedPerft(const int depth)
 
 void Engine::SetFenPosition(const std::string&fenStr)
 {
-    _board = FenTranslator::Translate(fenStr);
+    if (fenStr.length() >= _startposPrefix.length() && fenStr.substr(0, _startposPrefix.length()) == _startposPrefix)
+    {
+        _isStartPosPlayed = true;
+        _board = FenTranslator::GetDefault();
+        _startingBoard = _board;
+        return;
+    }
+
+    if (FenTranslator::Translate(fenStr, _board) == false)
+        _isStartPosPlayed = true;
+    else
+        _isStartPosPlayed = false;
+
+    _startingBoard = _board;
+}
+
+void Engine::SetStartpos()
+{
+    _isStartPosPlayed = true;
+    _board = FenTranslator::GetDefault();
     _startingBoard = _board;
 }
 
@@ -91,7 +110,9 @@ bool Engine::ApplyMoves(const std::vector<std::string>&UCIMoves)
 
 void Engine::RestartEngine()
 {
-    _board = _startingBoard;
+    _isStartPosPlayed = true;
+    _board = FenTranslator::GetDefault();
+    _startingBoard = _board;
 }
 
 Board Engine::GetUnderlyingBoardCopy() const
@@ -169,15 +190,14 @@ void Engine::_changeDebugState([[maybe_unused]]Engine&eng, std::string& nPath)
     GlobalLogger.ChangeLogStream(nPath);
 }
 
-// IMPORTANT TODO: what happens when startpos is not basic game?!
-
 void Engine::GoMoveTime(const lli time, const std::vector<std::string>& moves)
 {
-    if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
-    {
-        GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
-        return;
-    }
+    if (_book.IsLoadedCorrectly() && _isStartPosPlayed == true)
+        if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
+        {
+            GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
+            return;
+        }
 
     auto bestMove = TManager.goMoveTime(_board, time);
 
@@ -186,11 +206,12 @@ void Engine::GoMoveTime(const lli time, const std::vector<std::string>& moves)
 
 void Engine::GoDepth(const int depth, const std::vector<std::string>& moves)
 {
-    if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
-    {
-        GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
-        return;
-    }
+    if (_book.IsLoadedCorrectly() && _isStartPosPlayed == true)
+        if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
+        {
+            GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
+            return;
+        }
 
     auto bestMove = TManager.goDepth(_board, depth);
 
diff --git a/src/FenTranslator.cpp b/src/FenTranslator.cpp
index d65ae90..3872e8a 100644
--- a/src/FenTranslator.cpp
+++ b/src/FenTranslator.cpp
@@ -11,14 +11,13 @@
 
 const Board& FenTranslator::GetDefault() { return StartBoard; }
 
-Board FenTranslator::Translate(const std::string&fenPos)
+bool FenTranslator::Translate(const std::string&fenPos, Board&bd)
 {
     Board workBoard{};
+    size_t pos = 0;
 
     try
     {
-        size_t pos = 0;
-
         pos = _skipBlanks(pos, fenPos);
         pos = _processPositions(workBoard, pos, fenPos);
         pos = _skipBlanks(pos, fenPos);
@@ -32,10 +31,12 @@ Board FenTranslator::Translate(const std::string&fenPos)
     {
         GlobalLogger.LogError(exc.what());
         GlobalLogger.LogError("[ INFO ] Loading default layout...");
-        workBoard = StartBoard;
+        bd = StartBoard;
+        return false;
     }
 
-    return workBoard;
+    bd = workBoard;
+    return true;
 }
 
 std::string FenTranslator::Translate(const Board&board)
diff --git a/src/OpeningBook.cpp b/src/OpeningBook.cpp
index cdabe3a..e666baa 100644
--- a/src/OpeningBook.cpp
+++ b/src/OpeningBook.cpp
@@ -8,6 +8,7 @@
 #include <format>
 
 #include "../include/ParseTools.h"
+#include "../include/Interface/Logger.h"
 
 
 // OpenningBook::OpenningBook(const std::string& bookPath, const bookFileType type):
@@ -16,14 +17,23 @@
 
 OpeningBook::OpeningBook(const std::string& bookPath, const bookFileType type)
 {
-    switch (type)
-    {
-        case bookFileType::binary:
-            _readBinaryBook(bookPath);
+    try{
+        switch (type)
+        {
+            case bookFileType::binary:
+                _readBinaryBook(bookPath);
             break;
-        case bookFileType::text_uci:
-            _readTextBook(bookPath);
+            case bookFileType::text_uci:
+                _readTextBook(bookPath);
             break;
+        }
+        _isCorrectlyLoaded = true;
+    }
+    catch (const std::exception& exc)
+    {
+        GlobalLogger.StartErrLogging() << std::format(
+            "[ ERROR ] Book with path: {} was not correctly loaded due to following fact:\n\t{}\n", bookPath, exc.what());
+        _isCorrectlyLoaded = false;
     }
 }
 
@@ -32,6 +42,9 @@ void OpeningBook::SaveToBinary([[maybe_unused]]const std::string&outputPath) con
     throw std::runtime_error("[ ERROR ] Not yet implemented!");
 }
 
+bool OpeningBook::IsLoadedCorrectly() const
+{return _isCorrectlyLoaded;}
+
 const std::string& OpeningBook::GetRandomNextMove(const std::vector<std::string>&moves) const
 {
     static std::string _emptyStr{};
diff --git a/src/SearchPerfTester.cpp b/src/SearchPerfTester.cpp
index 9531e78..ed506a2 100644
--- a/src/SearchPerfTester.cpp
+++ b/src/SearchPerfTester.cpp
@@ -46,7 +46,8 @@ bool SearchPerfTester::PerformSearchPerfTest(const std::string& inputTestPath, c
 
 double SearchPerfTester::_performTestCase(const std::string& testCase, const int depth, stack<Move, DefaultStackSize>& stack)
 {
-    const auto bd = FenTranslator::Translate(testCase);
+    Board bd;
+    FenTranslator::Translate(testCase, bd);
     BestMoveSearch searcher(bd, stack);
 
     const auto tStart = std::chrono::steady_clock::now();
diff --git a/src/UCITranslator.cpp b/src/UCITranslator.cpp
index 7f87fc1..5e44a7b 100644
--- a/src/UCITranslator.cpp
+++ b/src/UCITranslator.cpp
@@ -193,7 +193,11 @@ UCITranslator::UCICommand UCITranslator::_positionResponse(const std::string&str
 
         _engine.SetFenPosition(_fenPosition);
     }
-    else if (workStr != "startpos")
+    else if (workStr == "startpos")
+    {
+
+    }
+    else
         return UCICommand::InvalidCommand;
 
     if (movesCord != std::string::npos)
diff --git a/.devnotes b/.devnotes
index d3bca8c..ed9da1d 100644
--- a/.devnotes
+++ b/.devnotes
@@ -1,8 +1,6 @@
 Important todos:
     - added guards and correct messaging for uint128
-    - REPAIR FKIGN UCI WITH GO FEN COMMAND!!!!!!!
-    - repair uci when go time or go depth are runnig on fen changed position
-    - what is field hallowedTiles in processking moves when checked
+
     - fully implement cmake thread amount detection
     - implement interuptible go depth and go movetime
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index c8a78b1..8b46cb5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -74,6 +74,7 @@ add_executable(Checkmate-Chariot main.cpp
         include/ThreadManagement/stack.h
         include/ThreadManagement/SearchThreadManager.h
         src/SearchThreadManager.cpp
+        include/Evaluation/MoveSortEval.h
 )
 
 find_package(OpenMP)
diff --git a/Tests/searchTests.csv b/Tests/searchTests.csv
index e121745..f92177f 100644
--- a/Tests/searchTests.csv
+++ b/Tests/searchTests.csv
@@ -2,10 +2,4 @@ rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
 rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
 rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
 rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
\ No newline at end of file
diff --git a/Tests/search_perf_out.csv b/Tests/search_perf_out.csv
new file mode 100644
index 0000000..1f8c10c
--- /dev/null
+++ b/Tests/search_perf_out.csv
@@ -0,0 +1,7 @@
+Fen position, depth, result
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 9
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 9
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 4
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 2
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 2
+Average results based on test count:, 5, 5.2
diff --git a/include/Engine.h b/include/Engine.h
index 50754f9..e32396d 100644
--- a/include/Engine.h
+++ b/include/Engine.h
@@ -49,6 +49,8 @@ public:
 
     void SetFenPosition(const std::string&fenStr);
 
+    void SetStartpos();
+
     static const EngineInfo& GetEngineInfo();
 
     bool ApplyMoves(const std::vector<std::string>&UCIMoves);
@@ -86,8 +88,10 @@ private:
 
     Board _board{};
     Board _startingBoard{};
-    OpeningBook _book{"uci_ready_long", OpeningBook::bookFileType::text_uci} ;
+    OpeningBook _book{"uci_ready_long", OpeningBook::bookFileType::text_uci};
 
+    bool _isStartPosPlayed = true;
+    static constexpr std::string_view _startposPrefix = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq";
 public:
     SearchThreadManager TManager{};
 private:
@@ -105,7 +109,7 @@ private:
 
     inline static const EngineInfo engineInfo = {
         .author = "Jakub Lisowski, Warsaw University of Technology",
-        .name = "ChessEngine development version 0.04",
+        .name = "ChessEngine development version 0.05",
         .options = std::map<std::string, const Option *>({
             std::make_pair("Threads", &Threads),
             std::make_pair("Debug Log File", &DebugLogFile),
diff --git a/include/Evaluation/MoveSortEval.h b/include/Evaluation/MoveSortEval.h
new file mode 100644
index 0000000..b9d9b50
--- /dev/null
+++ b/include/Evaluation/MoveSortEval.h
@@ -0,0 +1,62 @@
+//
+// Created by Jlisowskyy on 3/9/24.
+//
+
+#ifndef MOVESORTEVAL_H
+#define MOVESORTEVAL_H
+
+#include <cinttypes>
+
+struct MoveSortEval
+{
+
+    // ------------------------------
+    // Class interaction
+    // ------------------------------
+
+    static uint16_t ApplyAttackFieldEffects(uint16_t eval, const  uint64_t pawnAttacks, const uint64_t startField, const uint64_t targetField)
+    {
+        if ((pawnAttacks & startField) != 0) eval += RunAwayPrize;
+        if ((pawnAttacks & targetField) != 0) eval -= AttackedFigurePenalty;
+
+        return eval;
+    }
+
+    static uint16_t ApplyPromotionEffects(const uint16_t eval, const size_t nFig)
+    {
+        return FigureEval[nFig] + eval;
+    }
+
+    static uint16_t ApplyKilledFigEffect(const uint16_t eval, const size_t attackFig, const size_t killedFig)
+    {
+        return eval + FigureEval[killedFig] - FigureEval[attackFig];
+    }
+
+    // ------------------------------
+    // Class fiels
+    // ------------------------------
+
+    // static constexpr uint16_t ElPassantEval = 100;
+
+    static constexpr uint16_t FigureEval[] = {
+        100,                // wPawnsIndex,
+        300,                // wKnightsIndex,
+        300,                // wBishopsIndex,
+        500,                // wRooksIndex,
+        900,                // wQueensIndex,
+          0,                // wKingIndex,
+        100,                // bPawnsIndex,
+        300,                // bKnightsIndex,
+        300,                // bBishopsIndex,
+        500,                // bRooksIndex,
+        900,                // bQueensIndex,
+          0,                // bKingIndex,
+    };
+
+    static constexpr uint16_t AttackedFigurePenalty = 50;
+    static constexpr uint16_t RunAwayPrize = 50;
+    static constexpr uint16_t KilledFigWhenCheckedPrize = 1000;
+    static constexpr uint16_t DefaultValue = 1500;
+};
+
+#endif //MOVESORTEVAL_H
diff --git a/include/Interface/FenTranslator.h b/include/Interface/FenTranslator.h
index 6ed57cd..c31c962 100644
--- a/include/Interface/FenTranslator.h
+++ b/include/Interface/FenTranslator.h
@@ -19,7 +19,7 @@ struct FenTranslator
 
     static const Board& GetDefault();
 
-    static Board Translate(const std::string&fenPos)
+    static bool Translate(const std::string&fenPos, Board&bd)
     // Function simply translates position from FEN notation into inner representation.
     ;
 
@@ -93,7 +93,7 @@ private:
     };
 
 public:
-    static constexpr const char* StartingPosition = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
+    static constexpr auto StartingPosition = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
 
     static constexpr Board StartBoard = {
         .Castlings = {true, true, true, true},
diff --git a/include/MoveGeneration/Move.h b/include/MoveGeneration/Move.h
index 5f31ba3..e42545a 100644
--- a/include/MoveGeneration/Move.h
+++ b/include/MoveGeneration/Move.h
@@ -122,15 +122,15 @@ public:
         bd.boards[boardIndex] ^= field;
     }
 
-    void SetEval(const int16_t eval)
+    void SetEval(const uint16_t eval)
     {
         _storage |= eval;
     }
 
-    [[nodiscard]] int16_t GetEval() const
+    [[nodiscard]] uint64_t GetEval() const
     {
         static constexpr uint64_t EvalMask = 0xFFFFLLU;
-        return static_cast<int16_t>(_storage & EvalMask);
+        return _storage & EvalMask;
     }
 
     void SetStartField(const uint64_t startField)
diff --git a/include/MoveGeneration/MoveGenerator.h b/include/MoveGeneration/MoveGenerator.h
index 5427e8d..3b730bf 100644
--- a/include/MoveGeneration/MoveGenerator.h
+++ b/include/MoveGeneration/MoveGenerator.h
@@ -19,6 +19,7 @@
 #include "QueenMap.h"
 #include "RookMap.h"
 #include "Move.h"
+#include "../Evaluation/MoveSortEval.h"
 
 struct MoveGenerator {
     using stck = stack<Move, DefaultStackSize>;
@@ -114,20 +115,27 @@ private:
         const uint64_t enemyMap = _mechanics.GetColMap(SwapColor(_board.movColor));
         const uint64_t allyMap = _mechanics.GetColMap(_board.movColor);
 
-        _processFigMoves<GenOnlyAttackMoves, RookMap, true>(results, enemyMap, allyMap, pinnedFigsMap);
+        uint64_t pawnAttacks;
+        if (_board.movColor == WHITE)
+        {
+            pawnAttacks = BlackPawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
+            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap, true>(results, pawnAttacks,
+                                                 enemyMap, allyMap, pinnedFigsMap);
+        }
+        else
+        {
+            pawnAttacks = WhitePawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
+            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap, true>(results, pawnAttacks,
+                                                 enemyMap, allyMap, pinnedFigsMap);
+        }
 
-        _processFigMoves<GenOnlyAttackMoves, BishopMap>(results, enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, RookMap, true>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
 
-        _processFigMoves<GenOnlyAttackMoves, QueenMap>(results, enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, BishopMap>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
 
-        _processFigMoves<GenOnlyAttackMoves, KnightMap>(results, enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, QueenMap>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
 
-        if (_board.movColor == WHITE)
-            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap>(results,
-                                            enemyMap, allyMap, pinnedFigsMap);
-        else
-            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap>(results,
-                                            enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, KnightMap>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
 
         _processPlainKingMoves<GenOnlyAttackMoves>(results, blockedFigMap, allyMap, enemyMap);
 
@@ -150,34 +158,44 @@ private:
             return {pinned, _mechanics.GetAllowedTilesWhenCheckedByNonSliding()};
         }();
 
+
         // helping variable preparation
         const uint64_t enemyMap = _mechanics.GetColMap(SwapColor(_board.movColor));
         const uint64_t allyMap = _mechanics.GetColMap(_board.movColor);
 
         // Specific figure processing
-        _processFigMoves<GenOnlyAttackMoves, RookMap, true, false, false, true>(results,
+
+        uint64_t pawnAttacks;
+        if (_board.movColor == WHITE)
+        {
+            pawnAttacks = BlackPawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
+            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap, true>(results, pawnAttacks,
+                                                 enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
+        }
+        else
+        {
+            pawnAttacks = WhitePawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
+            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap, true>(results, pawnAttacks,
+                                                 enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
+        }
+
+
+        _processFigMoves<GenOnlyAttackMoves, RookMap, true, false, false, true>(results, pawnAttacks,
                                                             enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                             allowedTilesMap);
 
-        _processFigMoves<GenOnlyAttackMoves, BishopMap, false, false, false, true>(results,
+        _processFigMoves<GenOnlyAttackMoves, BishopMap, false, false, false, true>(results, pawnAttacks,
                                                                enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                                allowedTilesMap);
 
-        _processFigMoves<GenOnlyAttackMoves, QueenMap, false, false, false, true>(results,
+        _processFigMoves<GenOnlyAttackMoves, QueenMap, false, false, false, true>(results, pawnAttacks,
                                                               enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                               allowedTilesMap);
 
-        _processFigMoves<GenOnlyAttackMoves, KnightMap, false, false, false, true>(results,
+        _processFigMoves<GenOnlyAttackMoves, KnightMap, false, false, false, true>(results, pawnAttacks,
                                                                enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                                allowedTilesMap);
 
-        if (_board.movColor == WHITE)
-            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap, true>(results,
-                                                  enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
-        else
-            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap, true>(results,
-                                                  enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
-
         _processPlainKingMoves<GenOnlyAttackMoves>(results, blockedFigMap, allyMap, enemyMap);
     }
 
@@ -194,21 +212,22 @@ private:
         class MapT,
         bool isCheck = false
     >
-    void _processPawnMoves(payload& results, const uint64_t enemyMap, const uint64_t allyMap,
+    void _processPawnMoves(payload& results, const uint64_t pawnAttacks, const uint64_t enemyMap, const uint64_t allyMap,
                            const uint64_t pinnedFigMap,
-                           [[maybe_unused]] const uint64_t allowedMoveFillter = 0) {
+                           [[maybe_unused]] const uint64_t allowedMoveFillter = 0)
+    {
         const uint64_t promotingPawns = _board.boards[MapT::GetBoardIndex(0)] & MapT::PromotingMask;
         const uint64_t nonPromotingPawns = _board.boards[MapT::GetBoardIndex(0)] ^ promotingPawns;
 
-        _processFigMoves<GenOnlyAttackMoves, MapT, false, false, true, isCheck, MapT::GetElPassantField>(results, enemyMap,
+        _processFigMoves<GenOnlyAttackMoves, MapT, false, false, true, isCheck, MapT::GetElPassantField>(results, pawnAttacks, enemyMap,
             allyMap, pinnedFigMap, nonPromotingPawns, allowedMoveFillter);
 
         if (promotingPawns)
-            _processFigMoves<GenOnlyAttackMoves, MapT, false, true, true, isCheck>(results, enemyMap,
+            _processFigMoves<GenOnlyAttackMoves, MapT, false, true, true, isCheck>(results, pawnAttacks, enemyMap,
                                                                allyMap, pinnedFigMap, promotingPawns,
                                                                allowedMoveFillter);
 
-        _processElPassantMoves<MapT, isCheck>(results, allyMap | enemyMap, pinnedFigMap,
+        _processElPassantMoves<MapT, isCheck>(results, pawnAttacks, allyMap | enemyMap, pinnedFigMap,
                                               allowedMoveFillter);
     }
 
@@ -217,7 +236,7 @@ private:
         class MapT,
         bool isCheck = false
     >
-    void _processElPassantMoves(payload& results, const uint64_t fullMap, const uint64_t pinnedFigMap,
+    void _processElPassantMoves(payload& results, const uint64_t pawnAttacks, const uint64_t fullMap, const uint64_t pinnedFigMap,
                                 [[maybe_unused]] const uint64_t allowedMoveFillter = 0) {
         if (_board.elPassantField == Board::InvalidElPassantBoard) return;
 
@@ -267,6 +286,7 @@ private:
 
             // preparing and sending move
             Move mv{};
+            mv.SetEval(MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, pawnMap, moveMap));
             mv.SetStartField(ExtractMsbPos(pawnMap));
             mv.SetStartBoardIndex(MapT::GetBoardIndex(0));
             mv.SetTargetField(ExtractMsbPos(moveMap));
@@ -293,7 +313,7 @@ private:
         bool isCheck = false,
         uint64_t (*elPassantFieldDeducer)(uint64_t, uint64_t) = nullptr
     >
-    void _processFigMoves(payload& results, const uint64_t enemyMap, const uint64_t allyMap,
+    void _processFigMoves(payload& results, const uint64_t pawnAttacks, const uint64_t enemyMap, const uint64_t allyMap,
                           const uint64_t pinnedFigMap,
                           [[maybe_unused]] const uint64_t figureSelector = 0,
                           [[maybe_unused]] const uint64_t allowedMovesSelector = 0) {
@@ -338,6 +358,7 @@ private:
             if constexpr (GenOnlyAttackMoves == false)
                 _processNonAttackingMoves<promotePawns, elPassantFieldDeducer>(
                     results,
+                    pawnAttacks,
                     nonAttackingMoves,
                     MapT::GetBoardIndex(_board.movColor),
                     figBoard,
@@ -346,6 +367,7 @@ private:
 
             _processAttackingMoves<promotePawns>(
                 results,
+                pawnAttacks,
                 attackMoves,
                 MapT::GetBoardIndex(_board.movColor),
                 figBoard,
@@ -379,6 +401,7 @@ private:
             if constexpr (GenOnlyAttackMoves == false)
                 _processNonAttackingMoves<promotePawns, elPassantFieldDeducer>(
                     results,
+                    pawnAttacks,
                     nonAttackingMoves,
                     MapT::GetBoardIndex(_board.movColor),
                     figBoard,
@@ -388,6 +411,7 @@ private:
             // TODO: There is exactly one move possible
             _processAttackingMoves<promotePawns>(
                 results,
+                pawnAttacks,
                 attackMoves,
                 MapT::GetBoardIndex(_board.movColor),
                 figBoard,
@@ -403,7 +427,7 @@ private:
         bool promotePawns,
         uint64_t (*elPassantFieldDeducer)(uint64_t, uint64_t) = nullptr
     >
-    void _processNonAttackingMoves(payload& results, uint64_t nonAttackingMoves, const size_t figBoardIndex,
+    void _processNonAttackingMoves(payload& results, const uint64_t pawnAttacks, uint64_t nonAttackingMoves, const size_t figBoardIndex,
                                    const uint64_t startField,
                                    const std::array<bool, Board::CastlingCount + 1>& castlings
     ) const {
@@ -416,6 +440,7 @@ private:
             // simple figure case
             {
                 Move mv{};
+                mv.SetEval(MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard));
                 mv.SetStartField(ExtractMsbPos(startField));
                 mv.SetStartBoardIndex(figBoardIndex);
                 mv.SetTargetField(movePos);
@@ -438,11 +463,17 @@ private:
             {
                 // iterating through upgradable pieces
                 for (size_t i = knightsIndex; i < kingIndex; ++i) {
+                    const size_t targetBoard = _board.movColor * Board::BoardsPerCol + i;
+
                     Move mv{};
+                    uint16_t eval = MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard);
+                    eval = MoveSortEval::ApplyPromotionEffects(eval, targetBoard);
+
+                    mv.SetEval(eval);
                     mv.SetStartField(ExtractMsbPos(startField));
                     mv.SetStartBoardIndex(figBoardIndex);
                     mv.SetTargetField(movePos);
-                    mv.SetTargetBoardIndex(_board.movColor * Board::BoardsPerCol + i);
+                    mv.SetTargetBoardIndex(targetBoard);
                     mv.SetKilledBoardIndex(Board::SentinelBoardIndex);
                     mv.SetElPassantField(Board::InvalidElPassantField);
                     mv.SetCasltingRights(castlings);
@@ -458,7 +489,7 @@ private:
     template<
         bool promotePawns
     >
-    void _processAttackingMoves(payload& results, uint64_t attackingMoves, const size_t figBoardIndex,
+    void _processAttackingMoves(payload& results, const uint64_t pawnAttacks, uint64_t attackingMoves, const size_t figBoardIndex,
                                 const uint64_t startField,
                                 const std::array<bool, Board::CastlingCount + 1>& castlings) const {
         while (attackingMoves) {
@@ -472,6 +503,10 @@ private:
             // simple figure case
             {
                 Move mv{};
+                uint16_t eval = MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard);
+                eval = MoveSortEval::ApplyKilledFigEffect(eval, figBoardIndex, attackedFigBoardIndex);
+
+                mv.SetEval(eval);
                 mv.SetStartField(ExtractMsbPos(startField));
                 mv.SetStartBoardIndex(figBoardIndex);
                 mv.SetTargetField(movePos);
@@ -488,11 +523,19 @@ private:
             {
                 // iterating through upgradable pieces
                 for (size_t i = knightsIndex; i < kingIndex; ++i) {
+                    const size_t targetBoard = _board.movColor * Board::BoardsPerCol + i;
+
                     Move mv{};
+
+                    uint16_t eval = MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard);
+                    eval = MoveSortEval::ApplyKilledFigEffect(eval, figBoardIndex, attackedFigBoardIndex);
+                    eval = MoveSortEval::ApplyPromotionEffects(eval, targetBoard);
+
+                    mv.SetEval(eval);
                     mv.SetStartField(ExtractMsbPos(startField));
                     mv.SetStartBoardIndex(figBoardIndex);
                     mv.SetTargetField(movePos);
-                    mv.SetTargetBoardIndex(_board.movColor * Board::BoardsPerCol + i);
+                    mv.SetTargetBoardIndex(targetBoard);
                     mv.SetKilledBoardIndex(attackedFigBoardIndex);
                     mv.SetKilledFigureField(movePos);
                     mv.SetElPassantField(Board::InvalidElPassantField);
@@ -532,6 +575,7 @@ private:
                 const int newPos = ExtractMsbPos(nonAttackingMoves);
 
                 Move mv{};
+                mv.SetEval(MoveSortEval::DefaultValue);
                 mv.SetStartField(oldKingPos);
                 mv.SetStartBoardIndex(_board.movColor * Board::BoardsPerCol + kingIndex);
                 mv.SetTargetField(newPos);
@@ -555,6 +599,7 @@ private:
                 newKingBoard, SwapColor(_board.movColor));
 
             Move mv{};
+            mv.SetEval(MoveSortEval::DefaultValue);
             mv.SetStartField(oldKingPos);
             mv.SetStartBoardIndex(_board.movColor * Board::BoardsPerCol + kingIndex);
             mv.SetTargetField(newPos);
@@ -584,6 +629,7 @@ private:
                 castlings[_board.movColor * Board::CastlingsPerColor + QueenCastlingIndex] = false;
 
                 Move mv{};
+                mv.SetEval(MoveSortEval::DefaultValue);
                 mv.SetStartField(ExtractMsbPos(Board::DefaultKingBoards[_board.movColor]));
                 mv.SetStartBoardIndex(_board.movColor * Board::BoardsPerCol + kingIndex);
                 mv.SetTargetField(Board::CastlingNewKingPos[castlingIndex]);
diff --git a/include/OpeningBook/OpeningBook.h b/include/OpeningBook/OpeningBook.h
index 3b5dbe1..0a3610c 100644
--- a/include/OpeningBook/OpeningBook.h
+++ b/include/OpeningBook/OpeningBook.h
@@ -38,6 +38,8 @@ struct  OpeningBook
 
     // Possibly in use when array representation will be considered
     void SaveToBinary(const std::string&outputPath) const;
+    [[nodiscard]] bool IsLoadedCorrectly() const;
+
     [[nodiscard]] const std::string& GetRandomNextMove(const std::vector<std::string>&moves) const;
     [[nodiscard]] const std::vector<std::string>& GetAllPossibleNextMoves(const std::vector<std::string>&moves) const;
 
@@ -57,6 +59,7 @@ private:
     // ------------------------------
 
     MoveTRIE _moveTrie{};
+    bool _isCorrectlyLoaded{};
 };
 
 #endif //OPENINGBOOK_H
diff --git a/include/Search/BestMoveSearch.h b/include/Search/BestMoveSearch.h
index 11734d5..043fa6c 100644
--- a/include/Search/BestMoveSearch.h
+++ b/include/Search/BestMoveSearch.h
@@ -104,6 +104,7 @@ private:
         const auto oldCastlings = bd.Castlings;
         const auto oldElPassant = bd.elPassantField;
 
+        _heapSortMoves(moves);
         for(size_t i = 0; i < moves.size; ++i)
         {
             Move::MakeMove(moves[i], bd);
@@ -124,6 +125,7 @@ private:
     }
 
     static void _insertionSort(std::vector<std::pair<int, int>>& list);
+    static void _heapSortMoves(MoveGenerator::payload moves);
 
     // ------------------------------
     // Class fields
diff --git a/src/BestMoveSearch.cpp b/src/BestMoveSearch.cpp
index 283b1be..baa5c51 100644
--- a/src/BestMoveSearch.cpp
+++ b/src/BestMoveSearch.cpp
@@ -17,4 +17,19 @@ void BestMoveSearch::_insertionSort(std::vector<std::pair<int, int>>& list)
         }
         list[j+1] = val;
     }
-}
\ No newline at end of file
+}
+
+void BestMoveSearch::_heapSortMoves(MoveGenerator::payload moves)
+{
+    for (ssize_t i = 1; i < moves.size; ++i)
+    {
+        ssize_t j = i - 1;
+        const auto val = moves[i];
+        while(j >= 0 && moves[j].GetEval() < val.GetEval())
+        {
+            moves.data[j+1] = moves[j];
+            j--;
+        }
+        moves.data[j+1] = val;
+    }
+}
diff --git a/src/Engine.cpp b/src/Engine.cpp
index 11f2aa9..846678a 100644
--- a/src/Engine.cpp
+++ b/src/Engine.cpp
@@ -67,7 +67,26 @@ std::map<std::string, uint64_t> Engine::GetMoveBasedPerft(const int depth)
 
 void Engine::SetFenPosition(const std::string&fenStr)
 {
-    _board = FenTranslator::Translate(fenStr);
+    if (fenStr.length() >= _startposPrefix.length() && fenStr.substr(0, _startposPrefix.length()) == _startposPrefix)
+    {
+        _isStartPosPlayed = true;
+        _board = FenTranslator::GetDefault();
+        _startingBoard = _board;
+        return;
+    }
+
+    if (FenTranslator::Translate(fenStr, _board) == false)
+        _isStartPosPlayed = true;
+    else
+        _isStartPosPlayed = false;
+
+    _startingBoard = _board;
+}
+
+void Engine::SetStartpos()
+{
+    _isStartPosPlayed = true;
+    _board = FenTranslator::GetDefault();
     _startingBoard = _board;
 }
 
@@ -91,7 +110,9 @@ bool Engine::ApplyMoves(const std::vector<std::string>&UCIMoves)
 
 void Engine::RestartEngine()
 {
-    _board = _startingBoard;
+    _isStartPosPlayed = true;
+    _board = FenTranslator::GetDefault();
+    _startingBoard = _board;
 }
 
 Board Engine::GetUnderlyingBoardCopy() const
@@ -169,15 +190,14 @@ void Engine::_changeDebugState([[maybe_unused]]Engine&eng, std::string& nPath)
     GlobalLogger.ChangeLogStream(nPath);
 }
 
-// IMPORTANT TODO: what happens when startpos is not basic game?!
-
 void Engine::GoMoveTime(const lli time, const std::vector<std::string>& moves)
 {
-    if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
-    {
-        GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
-        return;
-    }
+    if (_book.IsLoadedCorrectly() && _isStartPosPlayed == true)
+        if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
+        {
+            GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
+            return;
+        }
 
     auto bestMove = TManager.goMoveTime(_board, time);
 
@@ -186,11 +206,12 @@ void Engine::GoMoveTime(const lli time, const std::vector<std::string>& moves)
 
 void Engine::GoDepth(const int depth, const std::vector<std::string>& moves)
 {
-    if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
-    {
-        GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
-        return;
-    }
+    if (_book.IsLoadedCorrectly() && _isStartPosPlayed == true)
+        if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
+        {
+            GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
+            return;
+        }
 
     auto bestMove = TManager.goDepth(_board, depth);
 
diff --git a/src/FenTranslator.cpp b/src/FenTranslator.cpp
index d65ae90..3872e8a 100644
--- a/src/FenTranslator.cpp
+++ b/src/FenTranslator.cpp
@@ -11,14 +11,13 @@
 
 const Board& FenTranslator::GetDefault() { return StartBoard; }
 
-Board FenTranslator::Translate(const std::string&fenPos)
+bool FenTranslator::Translate(const std::string&fenPos, Board&bd)
 {
     Board workBoard{};
+    size_t pos = 0;
 
     try
     {
-        size_t pos = 0;
-
         pos = _skipBlanks(pos, fenPos);
         pos = _processPositions(workBoard, pos, fenPos);
         pos = _skipBlanks(pos, fenPos);
@@ -32,10 +31,12 @@ Board FenTranslator::Translate(const std::string&fenPos)
     {
         GlobalLogger.LogError(exc.what());
         GlobalLogger.LogError("[ INFO ] Loading default layout...");
-        workBoard = StartBoard;
+        bd = StartBoard;
+        return false;
     }
 
-    return workBoard;
+    bd = workBoard;
+    return true;
 }
 
 std::string FenTranslator::Translate(const Board&board)
diff --git a/src/OpeningBook.cpp b/src/OpeningBook.cpp
index cdabe3a..e666baa 100644
--- a/src/OpeningBook.cpp
+++ b/src/OpeningBook.cpp
@@ -8,6 +8,7 @@
 #include <format>
 
 #include "../include/ParseTools.h"
+#include "../include/Interface/Logger.h"
 
 
 // OpenningBook::OpenningBook(const std::string& bookPath, const bookFileType type):
@@ -16,14 +17,23 @@
 
 OpeningBook::OpeningBook(const std::string& bookPath, const bookFileType type)
 {
-    switch (type)
-    {
-        case bookFileType::binary:
-            _readBinaryBook(bookPath);
+    try{
+        switch (type)
+        {
+            case bookFileType::binary:
+                _readBinaryBook(bookPath);
             break;
-        case bookFileType::text_uci:
-            _readTextBook(bookPath);
+            case bookFileType::text_uci:
+                _readTextBook(bookPath);
             break;
+        }
+        _isCorrectlyLoaded = true;
+    }
+    catch (const std::exception& exc)
+    {
+        GlobalLogger.StartErrLogging() << std::format(
+            "[ ERROR ] Book with path: {} was not correctly loaded due to following fact:\n\t{}\n", bookPath, exc.what());
+        _isCorrectlyLoaded = false;
     }
 }
 
@@ -32,6 +42,9 @@ void OpeningBook::SaveToBinary([[maybe_unused]]const std::string&outputPath) con
     throw std::runtime_error("[ ERROR ] Not yet implemented!");
 }
 
+bool OpeningBook::IsLoadedCorrectly() const
+{return _isCorrectlyLoaded;}
+
 const std::string& OpeningBook::GetRandomNextMove(const std::vector<std::string>&moves) const
 {
     static std::string _emptyStr{};
diff --git a/src/SearchPerfTester.cpp b/src/SearchPerfTester.cpp
index 9531e78..ed506a2 100644
--- a/src/SearchPerfTester.cpp
+++ b/src/SearchPerfTester.cpp
@@ -46,7 +46,8 @@ bool SearchPerfTester::PerformSearchPerfTest(const std::string& inputTestPath, c
 
 double SearchPerfTester::_performTestCase(const std::string& testCase, const int depth, stack<Move, DefaultStackSize>& stack)
 {
-    const auto bd = FenTranslator::Translate(testCase);
+    Board bd;
+    FenTranslator::Translate(testCase, bd);
     BestMoveSearch searcher(bd, stack);
 
     const auto tStart = std::chrono::steady_clock::now();
diff --git a/src/UCITranslator.cpp b/src/UCITranslator.cpp
index 7f87fc1..5e44a7b 100644
--- a/src/UCITranslator.cpp
+++ b/src/UCITranslator.cpp
@@ -193,7 +193,11 @@ UCITranslator::UCICommand UCITranslator::_positionResponse(const std::string&str
 
         _engine.SetFenPosition(_fenPosition);
     }
-    else if (workStr != "startpos")
+    else if (workStr == "startpos")
+    {
+
+    }
+    else
         return UCICommand::InvalidCommand;
 
     if (movesCord != std::string::npos)
diff --git a/.devnotes b/.devnotes
index ed9da1d..d3bca8c 100644
--- a/.devnotes
+++ b/.devnotes
@@ -1,6 +1,8 @@
 Important todos:
     - added guards and correct messaging for uint128
-
+    - REPAIR FKIGN UCI WITH GO FEN COMMAND!!!!!!!
+    - repair uci when go time or go depth are runnig on fen changed position
+    - what is field hallowedTiles in processking moves when checked
     - fully implement cmake thread amount detection
     - implement interuptible go depth and go movetime
 
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8b46cb5..c8a78b1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -74,7 +74,6 @@ add_executable(Checkmate-Chariot main.cpp
         include/ThreadManagement/stack.h
         include/ThreadManagement/SearchThreadManager.h
         src/SearchThreadManager.cpp
-        include/Evaluation/MoveSortEval.h
 )
 
 find_package(OpenMP)
diff --git a/Tests/searchTests.csv b/Tests/searchTests.csv
index f92177f..e121745 100644
--- a/Tests/searchTests.csv
+++ b/Tests/searchTests.csv
@@ -2,4 +2,10 @@ rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
 rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
 rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
 rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
\ No newline at end of file
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
+rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1, 6
diff --git a/Tests/search_perf_out.csv b/Tests/search_perf_out.csv
deleted file mode 100644
index 1f8c10c..0000000
--- a/Tests/search_perf_out.csv
+++ /dev/null
@@ -1,7 +0,0 @@
-Fen position, depth, result
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 9
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 9
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 4
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 2
-rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 , 6, 2
-Average results based on test count:, 5, 5.2
diff --git a/include/Engine.h b/include/Engine.h
index e32396d..50754f9 100644
--- a/include/Engine.h
+++ b/include/Engine.h
@@ -49,8 +49,6 @@ public:
 
     void SetFenPosition(const std::string&fenStr);
 
-    void SetStartpos();
-
     static const EngineInfo& GetEngineInfo();
 
     bool ApplyMoves(const std::vector<std::string>&UCIMoves);
@@ -88,10 +86,8 @@ private:
 
     Board _board{};
     Board _startingBoard{};
-    OpeningBook _book{"uci_ready_long", OpeningBook::bookFileType::text_uci};
+    OpeningBook _book{"uci_ready_long", OpeningBook::bookFileType::text_uci} ;
 
-    bool _isStartPosPlayed = true;
-    static constexpr std::string_view _startposPrefix = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq";
 public:
     SearchThreadManager TManager{};
 private:
@@ -109,7 +105,7 @@ private:
 
     inline static const EngineInfo engineInfo = {
         .author = "Jakub Lisowski, Warsaw University of Technology",
-        .name = "ChessEngine development version 0.05",
+        .name = "ChessEngine development version 0.04",
         .options = std::map<std::string, const Option *>({
             std::make_pair("Threads", &Threads),
             std::make_pair("Debug Log File", &DebugLogFile),
diff --git a/include/Evaluation/MoveSortEval.h b/include/Evaluation/MoveSortEval.h
deleted file mode 100644
index b9d9b50..0000000
--- a/include/Evaluation/MoveSortEval.h
+++ /dev/null
@@ -1,62 +0,0 @@
-//
-// Created by Jlisowskyy on 3/9/24.
-//
-
-#ifndef MOVESORTEVAL_H
-#define MOVESORTEVAL_H
-
-#include <cinttypes>
-
-struct MoveSortEval
-{
-
-    // ------------------------------
-    // Class interaction
-    // ------------------------------
-
-    static uint16_t ApplyAttackFieldEffects(uint16_t eval, const  uint64_t pawnAttacks, const uint64_t startField, const uint64_t targetField)
-    {
-        if ((pawnAttacks & startField) != 0) eval += RunAwayPrize;
-        if ((pawnAttacks & targetField) != 0) eval -= AttackedFigurePenalty;
-
-        return eval;
-    }
-
-    static uint16_t ApplyPromotionEffects(const uint16_t eval, const size_t nFig)
-    {
-        return FigureEval[nFig] + eval;
-    }
-
-    static uint16_t ApplyKilledFigEffect(const uint16_t eval, const size_t attackFig, const size_t killedFig)
-    {
-        return eval + FigureEval[killedFig] - FigureEval[attackFig];
-    }
-
-    // ------------------------------
-    // Class fiels
-    // ------------------------------
-
-    // static constexpr uint16_t ElPassantEval = 100;
-
-    static constexpr uint16_t FigureEval[] = {
-        100,                // wPawnsIndex,
-        300,                // wKnightsIndex,
-        300,                // wBishopsIndex,
-        500,                // wRooksIndex,
-        900,                // wQueensIndex,
-          0,                // wKingIndex,
-        100,                // bPawnsIndex,
-        300,                // bKnightsIndex,
-        300,                // bBishopsIndex,
-        500,                // bRooksIndex,
-        900,                // bQueensIndex,
-          0,                // bKingIndex,
-    };
-
-    static constexpr uint16_t AttackedFigurePenalty = 50;
-    static constexpr uint16_t RunAwayPrize = 50;
-    static constexpr uint16_t KilledFigWhenCheckedPrize = 1000;
-    static constexpr uint16_t DefaultValue = 1500;
-};
-
-#endif //MOVESORTEVAL_H
diff --git a/include/Interface/FenTranslator.h b/include/Interface/FenTranslator.h
index c31c962..6ed57cd 100644
--- a/include/Interface/FenTranslator.h
+++ b/include/Interface/FenTranslator.h
@@ -19,7 +19,7 @@ struct FenTranslator
 
     static const Board& GetDefault();
 
-    static bool Translate(const std::string&fenPos, Board&bd)
+    static Board Translate(const std::string&fenPos)
     // Function simply translates position from FEN notation into inner representation.
     ;
 
@@ -93,7 +93,7 @@ private:
     };
 
 public:
-    static constexpr auto StartingPosition = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
+    static constexpr const char* StartingPosition = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
 
     static constexpr Board StartBoard = {
         .Castlings = {true, true, true, true},
diff --git a/include/MoveGeneration/Move.h b/include/MoveGeneration/Move.h
index e42545a..5f31ba3 100644
--- a/include/MoveGeneration/Move.h
+++ b/include/MoveGeneration/Move.h
@@ -122,15 +122,15 @@ public:
         bd.boards[boardIndex] ^= field;
     }
 
-    void SetEval(const uint16_t eval)
+    void SetEval(const int16_t eval)
     {
         _storage |= eval;
     }
 
-    [[nodiscard]] uint64_t GetEval() const
+    [[nodiscard]] int16_t GetEval() const
     {
         static constexpr uint64_t EvalMask = 0xFFFFLLU;
-        return _storage & EvalMask;
+        return static_cast<int16_t>(_storage & EvalMask);
     }
 
     void SetStartField(const uint64_t startField)
diff --git a/include/MoveGeneration/MoveGenerator.h b/include/MoveGeneration/MoveGenerator.h
index 3b730bf..5427e8d 100644
--- a/include/MoveGeneration/MoveGenerator.h
+++ b/include/MoveGeneration/MoveGenerator.h
@@ -19,7 +19,6 @@
 #include "QueenMap.h"
 #include "RookMap.h"
 #include "Move.h"
-#include "../Evaluation/MoveSortEval.h"
 
 struct MoveGenerator {
     using stck = stack<Move, DefaultStackSize>;
@@ -115,27 +114,20 @@ private:
         const uint64_t enemyMap = _mechanics.GetColMap(SwapColor(_board.movColor));
         const uint64_t allyMap = _mechanics.GetColMap(_board.movColor);
 
-        uint64_t pawnAttacks;
-        if (_board.movColor == WHITE)
-        {
-            pawnAttacks = BlackPawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
-            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap, true>(results, pawnAttacks,
-                                                 enemyMap, allyMap, pinnedFigsMap);
-        }
-        else
-        {
-            pawnAttacks = WhitePawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
-            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap, true>(results, pawnAttacks,
-                                                 enemyMap, allyMap, pinnedFigsMap);
-        }
+        _processFigMoves<GenOnlyAttackMoves, RookMap, true>(results, enemyMap, allyMap, pinnedFigsMap);
 
-        _processFigMoves<GenOnlyAttackMoves, RookMap, true>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, BishopMap>(results, enemyMap, allyMap, pinnedFigsMap);
 
-        _processFigMoves<GenOnlyAttackMoves, BishopMap>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, QueenMap>(results, enemyMap, allyMap, pinnedFigsMap);
 
-        _processFigMoves<GenOnlyAttackMoves, QueenMap>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
+        _processFigMoves<GenOnlyAttackMoves, KnightMap>(results, enemyMap, allyMap, pinnedFigsMap);
 
-        _processFigMoves<GenOnlyAttackMoves, KnightMap>(results, pawnAttacks, enemyMap, allyMap, pinnedFigsMap);
+        if (_board.movColor == WHITE)
+            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap>(results,
+                                            enemyMap, allyMap, pinnedFigsMap);
+        else
+            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap>(results,
+                                            enemyMap, allyMap, pinnedFigsMap);
 
         _processPlainKingMoves<GenOnlyAttackMoves>(results, blockedFigMap, allyMap, enemyMap);
 
@@ -158,44 +150,34 @@ private:
             return {pinned, _mechanics.GetAllowedTilesWhenCheckedByNonSliding()};
         }();
 
-
         // helping variable preparation
         const uint64_t enemyMap = _mechanics.GetColMap(SwapColor(_board.movColor));
         const uint64_t allyMap = _mechanics.GetColMap(_board.movColor);
 
         // Specific figure processing
-
-        uint64_t pawnAttacks;
-        if (_board.movColor == WHITE)
-        {
-            pawnAttacks = BlackPawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
-            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap, true>(results, pawnAttacks,
-                                                 enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
-        }
-        else
-        {
-            pawnAttacks = WhitePawnMap::GetAttackFields(_board.boards[Board::BoardsPerCol*_board.movColor + pawnsIndex]);
-            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap, true>(results, pawnAttacks,
-                                                 enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
-        }
-
-
-        _processFigMoves<GenOnlyAttackMoves, RookMap, true, false, false, true>(results, pawnAttacks,
+        _processFigMoves<GenOnlyAttackMoves, RookMap, true, false, false, true>(results,
                                                             enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                             allowedTilesMap);
 
-        _processFigMoves<GenOnlyAttackMoves, BishopMap, false, false, false, true>(results, pawnAttacks,
+        _processFigMoves<GenOnlyAttackMoves, BishopMap, false, false, false, true>(results,
                                                                enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                                allowedTilesMap);
 
-        _processFigMoves<GenOnlyAttackMoves, QueenMap, false, false, false, true>(results, pawnAttacks,
+        _processFigMoves<GenOnlyAttackMoves, QueenMap, false, false, false, true>(results,
                                                               enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                               allowedTilesMap);
 
-        _processFigMoves<GenOnlyAttackMoves, KnightMap, false, false, false, true>(results, pawnAttacks,
+        _processFigMoves<GenOnlyAttackMoves, KnightMap, false, false, false, true>(results,
                                                                enemyMap, allyMap, pinnedFigsMap, UNUSED,
                                                                allowedTilesMap);
 
+        if (_board.movColor == WHITE)
+            _processPawnMoves<GenOnlyAttackMoves, WhitePawnMap, true>(results,
+                                                  enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
+        else
+            _processPawnMoves<GenOnlyAttackMoves, BlackPawnMap, true>(results,
+                                                  enemyMap, allyMap, pinnedFigsMap, allowedTilesMap);
+
         _processPlainKingMoves<GenOnlyAttackMoves>(results, blockedFigMap, allyMap, enemyMap);
     }
 
@@ -212,22 +194,21 @@ private:
         class MapT,
         bool isCheck = false
     >
-    void _processPawnMoves(payload& results, const uint64_t pawnAttacks, const uint64_t enemyMap, const uint64_t allyMap,
+    void _processPawnMoves(payload& results, const uint64_t enemyMap, const uint64_t allyMap,
                            const uint64_t pinnedFigMap,
-                           [[maybe_unused]] const uint64_t allowedMoveFillter = 0)
-    {
+                           [[maybe_unused]] const uint64_t allowedMoveFillter = 0) {
         const uint64_t promotingPawns = _board.boards[MapT::GetBoardIndex(0)] & MapT::PromotingMask;
         const uint64_t nonPromotingPawns = _board.boards[MapT::GetBoardIndex(0)] ^ promotingPawns;
 
-        _processFigMoves<GenOnlyAttackMoves, MapT, false, false, true, isCheck, MapT::GetElPassantField>(results, pawnAttacks, enemyMap,
+        _processFigMoves<GenOnlyAttackMoves, MapT, false, false, true, isCheck, MapT::GetElPassantField>(results, enemyMap,
             allyMap, pinnedFigMap, nonPromotingPawns, allowedMoveFillter);
 
         if (promotingPawns)
-            _processFigMoves<GenOnlyAttackMoves, MapT, false, true, true, isCheck>(results, pawnAttacks, enemyMap,
+            _processFigMoves<GenOnlyAttackMoves, MapT, false, true, true, isCheck>(results, enemyMap,
                                                                allyMap, pinnedFigMap, promotingPawns,
                                                                allowedMoveFillter);
 
-        _processElPassantMoves<MapT, isCheck>(results, pawnAttacks, allyMap | enemyMap, pinnedFigMap,
+        _processElPassantMoves<MapT, isCheck>(results, allyMap | enemyMap, pinnedFigMap,
                                               allowedMoveFillter);
     }
 
@@ -236,7 +217,7 @@ private:
         class MapT,
         bool isCheck = false
     >
-    void _processElPassantMoves(payload& results, const uint64_t pawnAttacks, const uint64_t fullMap, const uint64_t pinnedFigMap,
+    void _processElPassantMoves(payload& results, const uint64_t fullMap, const uint64_t pinnedFigMap,
                                 [[maybe_unused]] const uint64_t allowedMoveFillter = 0) {
         if (_board.elPassantField == Board::InvalidElPassantBoard) return;
 
@@ -286,7 +267,6 @@ private:
 
             // preparing and sending move
             Move mv{};
-            mv.SetEval(MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, pawnMap, moveMap));
             mv.SetStartField(ExtractMsbPos(pawnMap));
             mv.SetStartBoardIndex(MapT::GetBoardIndex(0));
             mv.SetTargetField(ExtractMsbPos(moveMap));
@@ -313,7 +293,7 @@ private:
         bool isCheck = false,
         uint64_t (*elPassantFieldDeducer)(uint64_t, uint64_t) = nullptr
     >
-    void _processFigMoves(payload& results, const uint64_t pawnAttacks, const uint64_t enemyMap, const uint64_t allyMap,
+    void _processFigMoves(payload& results, const uint64_t enemyMap, const uint64_t allyMap,
                           const uint64_t pinnedFigMap,
                           [[maybe_unused]] const uint64_t figureSelector = 0,
                           [[maybe_unused]] const uint64_t allowedMovesSelector = 0) {
@@ -358,7 +338,6 @@ private:
             if constexpr (GenOnlyAttackMoves == false)
                 _processNonAttackingMoves<promotePawns, elPassantFieldDeducer>(
                     results,
-                    pawnAttacks,
                     nonAttackingMoves,
                     MapT::GetBoardIndex(_board.movColor),
                     figBoard,
@@ -367,7 +346,6 @@ private:
 
             _processAttackingMoves<promotePawns>(
                 results,
-                pawnAttacks,
                 attackMoves,
                 MapT::GetBoardIndex(_board.movColor),
                 figBoard,
@@ -401,7 +379,6 @@ private:
             if constexpr (GenOnlyAttackMoves == false)
                 _processNonAttackingMoves<promotePawns, elPassantFieldDeducer>(
                     results,
-                    pawnAttacks,
                     nonAttackingMoves,
                     MapT::GetBoardIndex(_board.movColor),
                     figBoard,
@@ -411,7 +388,6 @@ private:
             // TODO: There is exactly one move possible
             _processAttackingMoves<promotePawns>(
                 results,
-                pawnAttacks,
                 attackMoves,
                 MapT::GetBoardIndex(_board.movColor),
                 figBoard,
@@ -427,7 +403,7 @@ private:
         bool promotePawns,
         uint64_t (*elPassantFieldDeducer)(uint64_t, uint64_t) = nullptr
     >
-    void _processNonAttackingMoves(payload& results, const uint64_t pawnAttacks, uint64_t nonAttackingMoves, const size_t figBoardIndex,
+    void _processNonAttackingMoves(payload& results, uint64_t nonAttackingMoves, const size_t figBoardIndex,
                                    const uint64_t startField,
                                    const std::array<bool, Board::CastlingCount + 1>& castlings
     ) const {
@@ -440,7 +416,6 @@ private:
             // simple figure case
             {
                 Move mv{};
-                mv.SetEval(MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard));
                 mv.SetStartField(ExtractMsbPos(startField));
                 mv.SetStartBoardIndex(figBoardIndex);
                 mv.SetTargetField(movePos);
@@ -463,17 +438,11 @@ private:
             {
                 // iterating through upgradable pieces
                 for (size_t i = knightsIndex; i < kingIndex; ++i) {
-                    const size_t targetBoard = _board.movColor * Board::BoardsPerCol + i;
-
                     Move mv{};
-                    uint16_t eval = MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard);
-                    eval = MoveSortEval::ApplyPromotionEffects(eval, targetBoard);
-
-                    mv.SetEval(eval);
                     mv.SetStartField(ExtractMsbPos(startField));
                     mv.SetStartBoardIndex(figBoardIndex);
                     mv.SetTargetField(movePos);
-                    mv.SetTargetBoardIndex(targetBoard);
+                    mv.SetTargetBoardIndex(_board.movColor * Board::BoardsPerCol + i);
                     mv.SetKilledBoardIndex(Board::SentinelBoardIndex);
                     mv.SetElPassantField(Board::InvalidElPassantField);
                     mv.SetCasltingRights(castlings);
@@ -489,7 +458,7 @@ private:
     template<
         bool promotePawns
     >
-    void _processAttackingMoves(payload& results, const uint64_t pawnAttacks, uint64_t attackingMoves, const size_t figBoardIndex,
+    void _processAttackingMoves(payload& results, uint64_t attackingMoves, const size_t figBoardIndex,
                                 const uint64_t startField,
                                 const std::array<bool, Board::CastlingCount + 1>& castlings) const {
         while (attackingMoves) {
@@ -503,10 +472,6 @@ private:
             // simple figure case
             {
                 Move mv{};
-                uint16_t eval = MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard);
-                eval = MoveSortEval::ApplyKilledFigEffect(eval, figBoardIndex, attackedFigBoardIndex);
-
-                mv.SetEval(eval);
                 mv.SetStartField(ExtractMsbPos(startField));
                 mv.SetStartBoardIndex(figBoardIndex);
                 mv.SetTargetField(movePos);
@@ -523,19 +488,11 @@ private:
             {
                 // iterating through upgradable pieces
                 for (size_t i = knightsIndex; i < kingIndex; ++i) {
-                    const size_t targetBoard = _board.movColor * Board::BoardsPerCol + i;
-
                     Move mv{};
-
-                    uint16_t eval = MoveSortEval::ApplyAttackFieldEffects(MoveSortEval::DefaultValue, pawnAttacks, startField, moveBoard);
-                    eval = MoveSortEval::ApplyKilledFigEffect(eval, figBoardIndex, attackedFigBoardIndex);
-                    eval = MoveSortEval::ApplyPromotionEffects(eval, targetBoard);
-
-                    mv.SetEval(eval);
                     mv.SetStartField(ExtractMsbPos(startField));
                     mv.SetStartBoardIndex(figBoardIndex);
                     mv.SetTargetField(movePos);
-                    mv.SetTargetBoardIndex(targetBoard);
+                    mv.SetTargetBoardIndex(_board.movColor * Board::BoardsPerCol + i);
                     mv.SetKilledBoardIndex(attackedFigBoardIndex);
                     mv.SetKilledFigureField(movePos);
                     mv.SetElPassantField(Board::InvalidElPassantField);
@@ -575,7 +532,6 @@ private:
                 const int newPos = ExtractMsbPos(nonAttackingMoves);
 
                 Move mv{};
-                mv.SetEval(MoveSortEval::DefaultValue);
                 mv.SetStartField(oldKingPos);
                 mv.SetStartBoardIndex(_board.movColor * Board::BoardsPerCol + kingIndex);
                 mv.SetTargetField(newPos);
@@ -599,7 +555,6 @@ private:
                 newKingBoard, SwapColor(_board.movColor));
 
             Move mv{};
-            mv.SetEval(MoveSortEval::DefaultValue);
             mv.SetStartField(oldKingPos);
             mv.SetStartBoardIndex(_board.movColor * Board::BoardsPerCol + kingIndex);
             mv.SetTargetField(newPos);
@@ -629,7 +584,6 @@ private:
                 castlings[_board.movColor * Board::CastlingsPerColor + QueenCastlingIndex] = false;
 
                 Move mv{};
-                mv.SetEval(MoveSortEval::DefaultValue);
                 mv.SetStartField(ExtractMsbPos(Board::DefaultKingBoards[_board.movColor]));
                 mv.SetStartBoardIndex(_board.movColor * Board::BoardsPerCol + kingIndex);
                 mv.SetTargetField(Board::CastlingNewKingPos[castlingIndex]);
diff --git a/include/OpeningBook/OpeningBook.h b/include/OpeningBook/OpeningBook.h
index 0a3610c..3b5dbe1 100644
--- a/include/OpeningBook/OpeningBook.h
+++ b/include/OpeningBook/OpeningBook.h
@@ -38,8 +38,6 @@ struct  OpeningBook
 
     // Possibly in use when array representation will be considered
     void SaveToBinary(const std::string&outputPath) const;
-    [[nodiscard]] bool IsLoadedCorrectly() const;
-
     [[nodiscard]] const std::string& GetRandomNextMove(const std::vector<std::string>&moves) const;
     [[nodiscard]] const std::vector<std::string>& GetAllPossibleNextMoves(const std::vector<std::string>&moves) const;
 
@@ -59,7 +57,6 @@ private:
     // ------------------------------
 
     MoveTRIE _moveTrie{};
-    bool _isCorrectlyLoaded{};
 };
 
 #endif //OPENINGBOOK_H
diff --git a/include/Search/BestMoveSearch.h b/include/Search/BestMoveSearch.h
index 043fa6c..11734d5 100644
--- a/include/Search/BestMoveSearch.h
+++ b/include/Search/BestMoveSearch.h
@@ -104,7 +104,6 @@ private:
         const auto oldCastlings = bd.Castlings;
         const auto oldElPassant = bd.elPassantField;
 
-        _heapSortMoves(moves);
         for(size_t i = 0; i < moves.size; ++i)
         {
             Move::MakeMove(moves[i], bd);
@@ -125,7 +124,6 @@ private:
     }
 
     static void _insertionSort(std::vector<std::pair<int, int>>& list);
-    static void _heapSortMoves(MoveGenerator::payload moves);
 
     // ------------------------------
     // Class fields
diff --git a/src/BestMoveSearch.cpp b/src/BestMoveSearch.cpp
index baa5c51..283b1be 100644
--- a/src/BestMoveSearch.cpp
+++ b/src/BestMoveSearch.cpp
@@ -17,19 +17,4 @@ void BestMoveSearch::_insertionSort(std::vector<std::pair<int, int>>& list)
         }
         list[j+1] = val;
     }
-}
-
-void BestMoveSearch::_heapSortMoves(MoveGenerator::payload moves)
-{
-    for (ssize_t i = 1; i < moves.size; ++i)
-    {
-        ssize_t j = i - 1;
-        const auto val = moves[i];
-        while(j >= 0 && moves[j].GetEval() < val.GetEval())
-        {
-            moves.data[j+1] = moves[j];
-            j--;
-        }
-        moves.data[j+1] = val;
-    }
-}
+}
\ No newline at end of file
diff --git a/src/Engine.cpp b/src/Engine.cpp
index 846678a..11f2aa9 100644
--- a/src/Engine.cpp
+++ b/src/Engine.cpp
@@ -67,26 +67,7 @@ std::map<std::string, uint64_t> Engine::GetMoveBasedPerft(const int depth)
 
 void Engine::SetFenPosition(const std::string&fenStr)
 {
-    if (fenStr.length() >= _startposPrefix.length() && fenStr.substr(0, _startposPrefix.length()) == _startposPrefix)
-    {
-        _isStartPosPlayed = true;
-        _board = FenTranslator::GetDefault();
-        _startingBoard = _board;
-        return;
-    }
-
-    if (FenTranslator::Translate(fenStr, _board) == false)
-        _isStartPosPlayed = true;
-    else
-        _isStartPosPlayed = false;
-
-    _startingBoard = _board;
-}
-
-void Engine::SetStartpos()
-{
-    _isStartPosPlayed = true;
-    _board = FenTranslator::GetDefault();
+    _board = FenTranslator::Translate(fenStr);
     _startingBoard = _board;
 }
 
@@ -110,9 +91,7 @@ bool Engine::ApplyMoves(const std::vector<std::string>&UCIMoves)
 
 void Engine::RestartEngine()
 {
-    _isStartPosPlayed = true;
-    _board = FenTranslator::GetDefault();
-    _startingBoard = _board;
+    _board = _startingBoard;
 }
 
 Board Engine::GetUnderlyingBoardCopy() const
@@ -190,14 +169,15 @@ void Engine::_changeDebugState([[maybe_unused]]Engine&eng, std::string& nPath)
     GlobalLogger.ChangeLogStream(nPath);
 }
 
+// IMPORTANT TODO: what happens when startpos is not basic game?!
+
 void Engine::GoMoveTime(const lli time, const std::vector<std::string>& moves)
 {
-    if (_book.IsLoadedCorrectly() && _isStartPosPlayed == true)
-        if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
-        {
-            GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
-            return;
-        }
+    if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
+    {
+        GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
+        return;
+    }
 
     auto bestMove = TManager.goMoveTime(_board, time);
 
@@ -206,12 +186,11 @@ void Engine::GoMoveTime(const lli time, const std::vector<std::string>& moves)
 
 void Engine::GoDepth(const int depth, const std::vector<std::string>& moves)
 {
-    if (_book.IsLoadedCorrectly() && _isStartPosPlayed == true)
-        if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
-        {
-            GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
-            return;
-        }
+    if (const auto& bookMove = _book.GetRandomNextMove(moves); !bookMove.empty())
+    {
+        GlobalLogger.StartLogging() << std::format("bestmove {}\n", bookMove);
+        return;
+    }
 
     auto bestMove = TManager.goDepth(_board, depth);
 
diff --git a/src/FenTranslator.cpp b/src/FenTranslator.cpp
index 3872e8a..d65ae90 100644
--- a/src/FenTranslator.cpp
+++ b/src/FenTranslator.cpp
@@ -11,13 +11,14 @@
 
 const Board& FenTranslator::GetDefault() { return StartBoard; }
 
-bool FenTranslator::Translate(const std::string&fenPos, Board&bd)
+Board FenTranslator::Translate(const std::string&fenPos)
 {
     Board workBoard{};
-    size_t pos = 0;
 
     try
     {
+        size_t pos = 0;
+
         pos = _skipBlanks(pos, fenPos);
         pos = _processPositions(workBoard, pos, fenPos);
         pos = _skipBlanks(pos, fenPos);
@@ -31,12 +32,10 @@ bool FenTranslator::Translate(const std::string&fenPos, Board&bd)
     {
         GlobalLogger.LogError(exc.what());
         GlobalLogger.LogError("[ INFO ] Loading default layout...");
-        bd = StartBoard;
-        return false;
+        workBoard = StartBoard;
     }
 
-    bd = workBoard;
-    return true;
+    return workBoard;
 }
 
 std::string FenTranslator::Translate(const Board&board)
diff --git a/src/OpeningBook.cpp b/src/OpeningBook.cpp
index e666baa..cdabe3a 100644
--- a/src/OpeningBook.cpp
+++ b/src/OpeningBook.cpp
@@ -8,7 +8,6 @@
 #include <format>
 
 #include "../include/ParseTools.h"
-#include "../include/Interface/Logger.h"
 
 
 // OpenningBook::OpenningBook(const std::string& bookPath, const bookFileType type):
@@ -17,23 +16,14 @@
 
 OpeningBook::OpeningBook(const std::string& bookPath, const bookFileType type)
 {
-    try{
-        switch (type)
-        {
-            case bookFileType::binary:
-                _readBinaryBook(bookPath);
+    switch (type)
+    {
+        case bookFileType::binary:
+            _readBinaryBook(bookPath);
             break;
-            case bookFileType::text_uci:
-                _readTextBook(bookPath);
+        case bookFileType::text_uci:
+            _readTextBook(bookPath);
             break;
-        }
-        _isCorrectlyLoaded = true;
-    }
-    catch (const std::exception& exc)
-    {
-        GlobalLogger.StartErrLogging() << std::format(
-            "[ ERROR ] Book with path: {} was not correctly loaded due to following fact:\n\t{}\n", bookPath, exc.what());
-        _isCorrectlyLoaded = false;
     }
 }
 
@@ -42,9 +32,6 @@ void OpeningBook::SaveToBinary([[maybe_unused]]const std::string&outputPath) con
     throw std::runtime_error("[ ERROR ] Not yet implemented!");
 }
 
-bool OpeningBook::IsLoadedCorrectly() const
-{return _isCorrectlyLoaded;}
-
 const std::string& OpeningBook::GetRandomNextMove(const std::vector<std::string>&moves) const
 {
     static std::string _emptyStr{};
diff --git a/src/SearchPerfTester.cpp b/src/SearchPerfTester.cpp
index ed506a2..9531e78 100644
--- a/src/SearchPerfTester.cpp
+++ b/src/SearchPerfTester.cpp
@@ -46,8 +46,7 @@ bool SearchPerfTester::PerformSearchPerfTest(const std::string& inputTestPath, c
 
 double SearchPerfTester::_performTestCase(const std::string& testCase, const int depth, stack<Move, DefaultStackSize>& stack)
 {
-    Board bd;
-    FenTranslator::Translate(testCase, bd);
+    const auto bd = FenTranslator::Translate(testCase);
     BestMoveSearch searcher(bd, stack);
 
     const auto tStart = std::chrono::steady_clock::now();
diff --git a/src/UCITranslator.cpp b/src/UCITranslator.cpp
index 5e44a7b..7f87fc1 100644
--- a/src/UCITranslator.cpp
+++ b/src/UCITranslator.cpp
@@ -193,11 +193,7 @@ UCITranslator::UCICommand UCITranslator::_positionResponse(const std::string&str
 
         _engine.SetFenPosition(_fenPosition);
     }
-    else if (workStr == "startpos")
-    {
-
-    }
-    else
+    else if (workStr != "startpos")
         return UCICommand::InvalidCommand;
 
     if (movesCord != std::string::npos)
